{"version":3,"sources":["assets/icons/tomato_small_color.svg","assets/icons/tomato_small_gray.svg","assets/icons/arrow.svg","assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","components/DashboardNavbar.tsx","components/task/FormBox.tsx","components/task/TomatoEstimater.tsx","enum/enumDashboardType.tsx","components/shared/Button.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Wrapper","styled","div","props","isDashboardOn","Toggle","imgSrc","Tag","tomato","arrow","DashboardNavbar","dashboards","map","dashboard","key","type","onClick","handleDashboardToggleOnClick","status","toggledSrc","untoggledSrc","handleDashboardTagOnClick","TomatoColorfulIcon","ArrowIcon","className","prototype","PropTypes","func","bool","array","FormBox","title","children","string","enumDashboardType","Tomato","tomatoStatus","TomatoEstimater","useState","tomatos","estimatedValue","setEstimatedValue","estimatedValueBuffer","setEstimatedValueBuffer","index","onMouseOver","handleTomatosMouseOver","onMouseOut","handleTomatosClick","tomatoGray","tomatoColor","Button","btnStyle","btnText","object","DashboardTitle","Dashboard","current","find","db","AddNewTask","name","placeholder","TaskLists","AnalyticsReport","RingTone","Error","getCurrentDashboard","Container","TimerWrapper","DashboardWrapper","App","setIsDashboardOn","AddToggledIcon","AddUntoggledIcon","ListToggledIcon","ListUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","setDashboards","dashboardType","newDashboards","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94220b5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_gray.3ab2cbcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  min-width: 80px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\n\nconst Toggle: any = styled.div<{ imgSrc: string }>`\n  background-image: ${props => `url(${props.imgSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.imgSrc})`};\n    cursor: pointer;\n  }\n`;\n\nconst Tag = styled.div<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 45px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  :hover {\n    cursor: pointer;\n  }\n  .tomato {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  .arrow {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar =props => {\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.dashboards.map(dashboard => {\n        return (\n          <Toggle\n            key={dashboard.type}\n            onClick={() => {\n              props.handleDashboardToggleOnClick(dashboard.type);\n            }}\n            imgSrc={dashboard.status ? dashboard.toggledSrc : dashboard.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={props.isDashboardOn}\n        onClick={() => {\n          props.handleDashboardTagOnClick(!props.isDashboardOn);\n        }}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n      >\n        <div className=\"tomato\" />\n        <div className=\"arrow\" />\n      </Tag>\n    </Wrapper>\n  );\n};\nDashboardNavbar.prototype = {\n  handleDashboardToggleOnClick: PropTypes.func,\n  handleDashboardTagOnClick: PropTypes.func,\n  isDashboardOn: PropTypes.bool,\n  dashboards: PropTypes.array,\n};\n\nexport default DashboardNavbar;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  font-family: Lato;\n  margin-top: 25px;\n  .form-title {\n    color: #acacac;\n    font-size: 17px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  input {\n    width: 100%;\n    height: 50px;\n    margin: 10px 0;\n    border-radius: 5px;\n    background-color: #fcfcfc;\n    outline: none;\n    font-size: 19px;\n    color: #333333;\n    padding-left: 10px;\n  }\n`;\n\nconst FormBox: (props: any) => JSX.Element =props => {\n  return (\n    <Wrapper>\n      <div className=\"form-title\">{props.title}</div>\n      {props.children}\n    </Wrapper>\n  );\n};\n\nFormBox.prototype = {\n  title: PropTypes.string,\n};\n\nexport default FormBox;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport tomatoGray from \"../../assets/icons/tomato_small_gray.svg\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 50px;\n`;\nconst Tomato = styled.div<{ tomatoStatus: string; onMouseOver: any }>`\n  width: calc(100% / 15);\n  height: 100%;\n  background-image: ${props => `url(${props.tomatoStatus})`};\n  background-position: center;\n  background-size: 100%;\n  background-repeat: no-repeat;\n  transition: 0.2s ease-in;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TomatoEstimater = () => {\n  const [tomatos, setTomatos] = useState([\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n  ]);\n  const [estimatedValue, setEstimatedValue] = useState(0);\n  const [estimatedValueBuffer, setEstimatedValueBuffer] = useState(0);\n  const handleTomatosMouseOver: (index: number) => void =index => {\n    setEstimatedValueBuffer(index + 1);\n  };\n  const handleTomatosMouseOut: (index: number) => void =index => {\n    setEstimatedValueBuffer(0);\n  };\n  const handleTomatosClick: (index: number) => void =index => {\n    setEstimatedValue(index + 1);\n  };\n  return (\n    <Wrapper>\n      {tomatos.map((tomato, index) => (\n        <Tomato\n          key={index}\n          onMouseOver={() => {\n            handleTomatosMouseOver(index);\n          }}\n          onMouseOut={() => {\n            handleTomatosMouseOut(index);\n          }}\n          onClick={() => {\n            handleTomatosClick(index);\n          }}\n          tomatoStatus={\n            estimatedValue > index\n              ? tomatoColor\n              : tomatoGray && estimatedValueBuffer > index\n              ? tomatoColor\n              : tomatoGray\n          }\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default TomatoEstimater;\n","export enum enumDashboardType {\n  UnKnow = 0,\n  AddNewTask = 1,\n  TaskLists = 2,\n  AnalyticsReport = 3,\n  RingTone = 4,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper: any = styled.div<{ btnStyle: object }>`\n  width: 80%;\n  border-radius: 30px;\n  height: 50px;\n  font-size: 19px;\n  font-family: Lato;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 50px;\n\n  color: #ea5548;\n  border: 3px solid #ea5548;\n  background-color: transparent;\n  transition: 0.1s linear;\n  :hover {\n    cursor: pointer;\n    color: #fcfcfc;\n    border: 3px solid #ea5548;\n    background-color: #ea5548;\n  }\n`;\n\nconst Button: (props: any) => JSX.Element =props => {\n  return <Wrapper btnStyle={props.btnStyle}>{props.btnText}</Wrapper>;\n};\n\nButton.prototype = {\n  btnText: PropTypes.string,\n  btnStyle: PropTypes.object,\n};\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport FormBox from \"../components/task/FormBox\";\nimport TomatoEstimater from \"./task/TomatoEstimater\";\nimport { enumDashboardType } from \"src/enum/enumDashboardType\";\nimport Button from \"./shared/Button\";\n\nconst Wrapper = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst DashboardTitle = styled.div`\n  width: 80%;\n  color: #fcfcfc;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: Lato;\n  padding: 25px 0;\n  margin-top: 5px;\n  border-bottom: 1px solid #414141;\n`;\n\nconst Dashboard: (props: any) => JSX.Element =props => {\n  const getCurrentDashboard: () => JSX.Element = () => {\n    const current = props.dashboards.find(db => db.status === true);\n    switch (current.type) {\n      case enumDashboardType.AddNewTask:\n        return (\n          <>\n            <DashboardTitle>{current.name}</DashboardTitle>\n            <FormBox title=\"TASK TITLE\">\n              <input type=\"text\" placeholder=\"My Second Task\" />\n            </FormBox>\n            <FormBox title=\"ESTIMATED TOMOTO\">\n              <TomatoEstimater />\n            </FormBox>\n            <Button btnStyle={{}} btnText={`ADD TASK`}></Button>\n          </>\n        );\n      case enumDashboardType.TaskLists:\n        return (\n          <>\n            <DashboardTitle>{current.name}</DashboardTitle>\n          </>\n        );\n      case enumDashboardType.AnalyticsReport:\n        return (\n          <>\n            <DashboardTitle>{current.name}</DashboardTitle>\n          </>\n        );\n      case enumDashboardType.RingTone:\n        return (\n          <>\n            <DashboardTitle>{current.name}</DashboardTitle>\n          </>\n        );\n      default:\n        throw new Error(\"error\");\n    }\n  };\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.isDashboardOn ? getCurrentDashboard() : null}\n    </Wrapper>\n  );\n};\n\nDashboard.prototype = {\n  isDashboardOn: PropTypes.bool,\n  dashboards: PropTypes.array,\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport ListUntoggledIcon from \"./assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"./assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"./assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"./assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"./assets/icons/list_red.svg\";\nimport AddToggledIcon from \"./assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"./assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"./assets/icons/analysis_red.svg\";\nimport { enumDashboardType } from \"./enum/enumDashboardType\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: transparent;\n  display: flex;\n`;\nconst TimerWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(65% - 80px)\" : \"calc(100% - 80px)\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n`;\nconst DashboardWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(35% + 80px)\" : \"80px\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\nconst App = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(true);\n  const [dashboards, setDashboards] = useState([\n    {\n      type: enumDashboardType.AddNewTask,\n      status: true,\n      name: \"ADD NEW TASK\",\n      toggledSrc: AddToggledIcon,\n      untoggledSrc: AddUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.TaskLists,\n      status: false,\n      name: \"TASK LISTS\",\n      toggledSrc: ListToggledIcon,\n      untoggledSrc: ListUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.AnalyticsReport,\n      status: false,\n      name: \"ANALYTICS REPORT\",\n      toggledSrc: AnalysisToggledIcon,\n      untoggledSrc: AnalysisUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.RingTone,\n      status: false,\n      name: \"RING TONE\",\n      toggledSrc: RingtoneToggledIcon,\n      untoggledSrc: RingtoneUntoggledIcon,\n    },\n  ]);\n\n  const handleDashboardToggleOnClick: (dashboardType: enumDashboardType) => void = (\n    dashboardType: enumDashboardType\n  ) => {\n    const dashboardIsOn: any = dashboards.find(dashboard => dashboard.status === true);\n    if (dashboardIsOn.type === dashboardType) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    const cloneDashboards: any[] = [...dashboards];\n    const newDashboards: any[] = cloneDashboards.map(dashboard => {\n      dashboard.type !== dashboardType ? (dashboard.status = false) : (dashboard.status = true);\n      return dashboard;\n    });\n    setDashboards(newDashboards);\n  };\n  const handleDashboardTagOnClick: (toggle: boolean) => void = (toggle: boolean) => {\n    setIsDashboardOn(toggle);\n  };\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn} />\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleDashboardToggleOnClick={handleDashboardToggleOnClick}\n          handleDashboardTagOnClick={handleDashboardTagOnClick}\n        />\n        <Dashboard dashboards={dashboards} isDashboardOn={isDashboardOn} />\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}