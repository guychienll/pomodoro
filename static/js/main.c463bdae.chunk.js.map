{"version":3,"sources":["assets/icons/tomato_small_color.svg","assets/icons/arrow.svg","assets/icons/tomato_small_gray.svg","assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","enum/enumDashboardToggleType.tsx","components/DashboardNavbar.tsx","enum/enumDashboardType.tsx","components/task/FormBox.tsx","components/task/TomatoEstimater.tsx","components/shared/Button.tsx","components/task/AddNewTask.tsx","components/shared/List.tsx","enum/enumTaskStatus.tsx","components/task/TaskLists.tsx","components/Dashboard.tsx","components/initDashboards.tsx","components/task/initTaskBuffer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","enumDashboardToggleType","enumDashboardType","Wrapper","styled","div","props","isDashboardOn","Toggle","button","imgSrc","Tag","tomato","arrow","DashboardNavbar","dashboards","handleDashboardToggleOnClick","map","dashboard","name","NavButton","key","type","onClick","e","status","toggledSrc","untoggledSrc","toString","TomatoColorfulIcon","ArrowIcon","className","FormBox","title","children","prototype","PropTypes","string","Tomato","tomatoStatus","TomatoEstimater","useState","estimatedValueBuffer","setEstimatedValueBuffer","value","onMouseOver","handleTomatosMouseOver","onMouseOut","handleTaskBufferOnChange","taskBuffer","point","tomatoColor","tomatoGray","Button","btnAction","btnStyle","btnText","AddNewTask","handleAddNewTaskOnClick","onChange","placeholder","enumTaskStatus","Left","Right","List","handleTaskOnClick","primaryKey","headerIcon","actionBtn","TabGroup","Tab","currentStatus","tabType","HeaderIcon","isContentOn","Task","Title","Content","FormGroup","BtnGroup","NoDatas","TaskLists","Todo","tabStatus","setTabStatus","ContentByTaskTypeMap","Map","Done","Archieve","Object","values","filter","Number","tasks","task","length","sort","t1","t2","modifiedOn","sortedTask","createdOn","dot","index","get","array","DashboardTitle","Dashboard","find","db","currentName","currentType","dashboardByCurrentStatusMap","AnalyticsReport","RingTone","initDashboards","AddToggledIcon","AddUntoggledIcon","ListToggledIcon","ListUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","initTaskBuffer","Container","TimerWrapper","DashboardWrapper","App","setIsDashboardOn","setDashboards","setTaskBuffer","setTasks","dashboardType","target","dashboardIsOpened","cloneDashboards","forEach","cloneTasks","cloneTaskBuffer","timeStamp","Date","getTime","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c463bdae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_gray.3ab2cbcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","export enum enumDashboardToggleType {\n  Unknow = 0,\n  NavButton = \"navButton\",\n  Tag = \"tag\",\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport { dashboardNavBarProps } from \"../typeAlias/dashboardNavBarProps\";\nimport { enumDashboardToggleType } from \"../enum/enumDashboardToggleType\";\n\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  min-width: 80px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\nconst Toggle: any = styled.button<{ imgSrc: string }>`\n  background-image: ${props => `url(${props.imgSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.imgSrc})`};\n    cursor: pointer;\n  }\n`;\nconst Tag: any = styled.button<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 45px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  .tomato {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  .arrow {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar: (props: dashboardNavBarProps) => JSX.Element =props => {\n  const { isDashboardOn, dashboards, handleDashboardToggleOnClick } = props;\n  return (\n    <Wrapper isDashboardOn={isDashboardOn}>\n      {dashboards.map(dashboard => {\n        return (\n          <Toggle\n            name={enumDashboardToggleType.NavButton}\n            key={dashboard.type}\n            onClick={(e: any) => {\n              handleDashboardToggleOnClick(e, dashboard.type);\n            }}\n            imgSrc={dashboard.status ? dashboard.toggledSrc : dashboard.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={isDashboardOn}\n        name={enumDashboardToggleType.Tag.toString()}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n        onClick={(e: any) => {\n          handleDashboardToggleOnClick(e);\n        }}\n      >\n        <button\n          className=\"tomato\"\n          name={enumDashboardToggleType.Tag.toString()}\n          onClick={(e: any) => {\n            handleDashboardToggleOnClick(e);\n          }}\n        />\n        <button\n          className=\"arrow\"\n          name={enumDashboardToggleType.Tag.toString()}\n          onClick={(e: any) => {\n            handleDashboardToggleOnClick(e);\n          }}\n        />\n      </Tag>\n    </Wrapper>\n  );\n};\n\nexport default DashboardNavbar;\n","export enum enumDashboardType {\n  UnKnow = 0,\n  AddNewTask = 1,\n  TaskLists = 2,\n  AnalyticsReport = 3,\n  RingTone = 4,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  font-family: Lato;\n  margin-top: 25px;\n  .form-title {\n    color: #acacac;\n    font-size: 17px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  input {\n    width: 100%;\n    height: 50px;\n    margin: 10px 0;\n    border-radius: 5px;\n    background-color: #fcfcfc;\n    outline: none;\n    font-size: 19px;\n    color: #333333;\n    padding-left: 10px;\n  }\n`;\n\nconst FormBox: (props: any) => JSX.Element =props => {\n  return (\n    <Wrapper>\n      <div className=\"form-title\">{props.title}</div>\n      {props.children}\n    </Wrapper>\n  );\n};\n\nFormBox.prototype = {\n  title: PropTypes.string,\n};\n\nexport default FormBox;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport tomatoGray from \"../../assets/icons/tomato_small_gray.svg\";\nimport { ITask } from \"src/interface/ITask\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 50px;\n`;\nconst Tomato = styled.button<{ tomatoStatus: string }>`\n  width: calc(100% / 15);\n  height: 100%;\n  background-image: ${props => `url(${props.tomatoStatus})`};\n  background-position: center;\n  background-size: 100%;\n  background-repeat: no-repeat;\n  transition: 0.2s ease-in;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst TomatoEstimater: (props: {\n  taskBuffer: ITask;\n  handleTaskBufferOnChange: any;\n}) => JSX.Element =props => {\n  const tomatos: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const [estimatedValueBuffer, setEstimatedValueBuffer] = useState(0);\n  const handleTomatosMouseOver: (value: number) => void =value => {\n    setEstimatedValueBuffer(value);\n  };\n  const handleTomatosMouseOut: (value: number) => void =value => {\n    setEstimatedValueBuffer(0);\n  };\n  return (\n    <Wrapper>\n      {tomatos.map(value => {\n        return (\n          <Tomato\n            key={value}\n            name=\"point\"\n            value={value}\n            onMouseOver={() => {\n              handleTomatosMouseOver(value);\n            }}\n            onMouseOut={() => {\n              handleTomatosMouseOut(value);\n            }}\n            onClick={e => {\n              props.handleTaskBufferOnChange(e);\n            }}\n            tomatoStatus={\n              props.taskBuffer.point >= value || estimatedValueBuffer >= value\n                ? tomatoColor\n                : tomatoGray\n            }\n          />\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nexport default TomatoEstimater;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper: any = styled.div<{ btnStyle: object }>`\n  width: 80%;\n  border-radius: 30px;\n  height: 50px;\n  font-size: 19px;\n  font-family: Lato;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 30px;\n  color: #ea5548;\n  border: 3px solid #ea5548;\n  background-color: transparent;\n  transition: 0.1s linear;\n  :hover {\n    cursor: pointer;\n    color: #fcfcfc;\n    border: 3px solid #ea5548;\n    background-color: #ea5548;\n  }\n`;\n\nconst Button: (props: { btnText: string; btnStyle: object; btnAction: any }) => JSX.Element =props => {\n  return (\n    <Wrapper onClick={props.btnAction} btnStyle={props.btnStyle}>\n      {props.btnText}\n    </Wrapper>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FormBox from \"./FormBox\";\nimport TomatoEstimater from \"./TomatoEstimater\";\nimport Button from \"../shared/Button\";\nimport { addNewTaskProps } from \"../../typeAlias/addNewTaskProps\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst AddNewTask: (props: addNewTaskProps) => JSX.Element =props => {\n  const { name } = props.taskBuffer;\n  const { handleAddNewTaskOnClick, handleTaskBufferOnChange, taskBuffer, children } = props;\n  return (\n    <Wrapper>\n      {children}\n      <FormBox title=\"TASK TITLE\">\n        <input\n          name=\"name\"\n          value={name}\n          onChange={handleTaskBufferOnChange}\n          type=\"text\"\n          placeholder=\"Plz Enter your task ...\"\n        />\n      </FormBox>\n      <FormBox title=\"ESTIMATED TOMOTO\">\n        <TomatoEstimater\n          handleTaskBufferOnChange={handleTaskBufferOnChange}\n          taskBuffer={taskBuffer}\n        />\n      </FormBox>\n      <Button btnAction={handleAddNewTaskOnClick} btnStyle={{}} btnText={`ADD TASK`} />\n    </Wrapper>\n  );\n};\n\nexport default AddNewTask;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #414141;\n  color: #fcfcfc;\n  min-width: 220px;\n  border-bottom: 1px solid #333333;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst Left = styled.div`\n  display: flex;\n  width: 90%;\n`;\nconst Right = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 15px;\n`;\nconst List = (props: {\n  headerIcon: JSX.Element;\n  title: JSX.Element;\n  actionBtn: JSX.Element;\n  handleTaskOnClick: any;\n  primaryKey: number;\n}) => {\n  return (\n    <Wrapper\n      onClick={() => {\n        props.handleTaskOnClick(props.primaryKey);\n      }}\n    >\n      <Left>\n        {props.headerIcon}\n        {props.title}\n      </Left>\n      <Right>{props.actionBtn}</Right>\n    </Wrapper>\n  );\n};\n\nexport default List;\n","export enum enumTaskStatus {\n  Unknow = 0,\n  Todo = 1,\n  Done = 2,\n  Archieve = 3,\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport List from \"../shared/List\";\nimport PropTypes from \"prop-types\";\nimport { enumTaskStatus } from \"src/enum/enumTaskStatus\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport FormBox from \"./FormBox\";\nimport { taskListsProps } from \"../../typeAlias/taskListsProps\";\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  color: #fcfcfc;\n`;\nconst TabGroup = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 80%;\n  height: 25px;\n  margin-top: 25px;\n`;\nconst Tab = styled.div<{ currentStatus: enumTaskStatus; tabType: enumTaskStatus }>`\n  min-width: 55px;\n  border-radius: 8px 8px 0 0;\n  width: calc(100% / 6);\n  height: 100%;\n  background-color: ${props => (props.currentStatus === props.tabType ? \"#ea5548\" : \"#606060\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Lato;\n  font-weight: bold;\n  font-size: 12px;\n  margin-right: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst HeaderIcon = styled.div<{ isContentOn: boolean }>`\n  background-image: url(${tomatoColor});\n  background-repeat: no-repeat;\n  background-size: 100%;\n  background-position: center;\n  width: calc(100% / 25);\n  min-width: 17px;\n  margin: 0px 15px;\n  opacity: ${props => {\n    return props.isContentOn ? \"100%\" : \"0%\";\n  }};\n  transition: 0.1s ease-in;\n`;\nconst Task = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  margin-top: 1px;\n`;\n\nconst Title = styled.div`\n  width: calc(100% / 3.5);\n  min-width: 120px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  .name {\n    font-family: Lato;\n    width: 100%;\n  }\n  .estimated {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    width: 100%;\n    .dot {\n      background-color: #ea5548;\n      border-radius: 100%;\n      width: 10px;\n      height: 10px;\n      margin-right: auto;\n    }\n  }\n`;\nconst Content = styled.div<{ isContentOn: boolean }>`\n  width: 80%;\n  height: ${props => (props.isContentOn ? \"380px\" : \"0\")};\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  background-color: #414141;\n  transition: all 0.1s ease-in-out;\n  overflow: hidden;\n`;\nconst FormGroup = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst BtnGroup = styled.div`\n  width: 80%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst NoDatas = styled.div`\n  width: 80%;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  font-family: Lato;\n  margin-top: 30px;\n`;\n\nconst TaskLists = (props: taskListsProps) => {\n  const [tabStatus, setTabStatus] = useState(enumTaskStatus.Todo);\n  const handleTabStatusOnClick = (tabType: enumTaskStatus) => {\n    setTabStatus(tabType);\n  };\n\n  const ContentByTaskTypeMap: Map<enumTaskStatus, JSX.Element> = new Map([\n    [\n      enumTaskStatus.Todo,\n      <FormGroup>\n        <FormBox title=\"TASK TITLE\">\n          <input type=\"text\" placeholder=\"My Second Task\" />\n        </FormBox>\n        <FormBox title=\"ESTIMATED TOMOTO\">{/* <TomatoEstimater /> */}</FormBox>\n        <BtnGroup>\n          {/* <Button btnStyle={{}} btnText=\"Archive\" />\n          <Button btnStyle={{}} btnText=\"SAVE\" /> */}\n        </BtnGroup>\n      </FormGroup>,\n    ],\n    [enumTaskStatus.Done, null],\n    [enumTaskStatus.Archieve, null],\n  ]);\n  return (\n    <Wrapper>\n      {props.children}\n      <TabGroup>\n        {Object.values(enumTaskStatus)\n          .filter(status => Number(status) > 0)\n          .map(status => {\n            return (\n              <Tab\n                key={status}\n                currentStatus={tabStatus}\n                tabType={status as enumTaskStatus}\n                onClick={() => {\n                  handleTabStatusOnClick(status as enumTaskStatus);\n                }}\n              >\n                {enumTaskStatus[status]}\n              </Tab>\n            );\n          })}\n      </TabGroup>\n      {props.tasks.filter(task => task.status === tabStatus).length > 0 ? (\n        props.tasks\n          .filter(task => task.status === tabStatus)\n          .sort((t1, t2) => (t1.modifiedOn > t2.modifiedOn ? -1 : 1))\n          .map(sortedTask => (\n            <Task key={sortedTask.createdOn}>\n              <List\n                primaryKey={sortedTask.createdOn}\n                handleTaskOnClick={props.handleTaskOnClick}\n                headerIcon={<HeaderIcon isContentOn={sortedTask.isContentOn} />}\n                actionBtn={<i className=\"fas fa-ellipsis-h fa-lg\"></i>}\n                title={\n                  <Title>\n                    <div className=\"name\">{sortedTask.name}</div>\n                    <div className=\"estimated\">\n                      {[1, 2, 3, 4, 5, 6, 7, 8].map((dot, index) => {\n                        return <div key={index} className=\"dot\"></div>;\n                      })}\n                    </div>\n                  </Title>\n                }\n              />\n              <Content isContentOn={sortedTask.isContentOn}>\n                {ContentByTaskTypeMap.get(sortedTask.status)}\n              </Content>\n            </Task>\n          ))\n      ) : (\n        <NoDatas>No {enumTaskStatus[tabStatus]} Tasks</NoDatas>\n      )}\n    </Wrapper>\n  );\n};\n\nTaskLists.prototype = {\n  tasks: PropTypes.array,\n};\n\nexport default TaskLists;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { enumDashboardType } from \"src/enum/enumDashboardType\";\nimport AddNewTask from \"./task/AddNewTask\";\nimport TaskLists from \"./task/TaskLists\";\nimport { IDashboard } from \"src/interface/IDashboard\";\nimport { dashboardProps } from \"../typeAlias/dashboardProps\";\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n  overflow: hidden;\n`;\nconst DashboardTitle: any = styled.div`\n  width: 80%;\n  color: #fcfcfc;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: Lato;\n  padding: 25px 0;\n  margin-top: 5px;\n  border-bottom: 1px solid #414141;\n`;\n\nconst Dashboard: (props: dashboardProps) => JSX.Element =props => {\n  const { name: currentName, type: currentType }: IDashboard = props.dashboards.find(db => db.status === true\n  );\n  const {\n    taskBuffer,\n    handleAddNewTaskOnClick,\n    handleTaskBufferOnChange,\n    tasks,\n    handleTaskOnClick,\n    isDashboardOn,\n  } = props;\n\n  const dashboardByCurrentStatusMap: Map<enumDashboardType, JSX.Element> = new Map([\n    [\n      enumDashboardType.AddNewTask,\n      <AddNewTask\n        taskBuffer={taskBuffer}\n        handleAddNewTaskOnClick={handleAddNewTaskOnClick}\n        handleTaskBufferOnChange={handleTaskBufferOnChange}\n      >\n        <DashboardTitle>{currentName}</DashboardTitle>\n      </AddNewTask>,\n    ],\n    [\n      enumDashboardType.TaskLists,\n      <TaskLists handleTaskOnClick={handleTaskOnClick} tasks={tasks}>\n        <DashboardTitle>{currentName}</DashboardTitle>\n      </TaskLists>,\n    ],\n    [enumDashboardType.AnalyticsReport, null],\n    [enumDashboardType.RingTone, null],\n  ]);\n  return (\n    <Wrapper isDashboardOn={isDashboardOn}>\n      {isDashboardOn ? dashboardByCurrentStatusMap.get(currentType) : null}\n    </Wrapper>\n  );\n};\n\nexport default Dashboard;\n","import ListUntoggledIcon from \"../assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"../assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"../assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"../assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"../assets/icons/list_red.svg\";\nimport AddToggledIcon from \"../assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"../assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"../assets/icons/analysis_red.svg\";\nimport { enumDashboardType } from \"../enum/enumDashboardType\";\nimport { IDashboard } from \"../interface/IDashboard\";\nexport const initDashboards: IDashboard[] = [\n  {\n    type: enumDashboardType.AddNewTask,\n    status: true,\n    name: \"ADD NEW TASK\",\n    toggledSrc: AddToggledIcon,\n    untoggledSrc: AddUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.TaskLists,\n    status: false,\n    name: \"TASK LISTS\",\n    toggledSrc: ListToggledIcon,\n    untoggledSrc: ListUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.AnalyticsReport,\n    status: false,\n    name: \"ANALYTICS REPORT\",\n    toggledSrc: AnalysisToggledIcon,\n    untoggledSrc: AnalysisUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.RingTone,\n    status: false,\n    name: \"RING TONE\",\n    toggledSrc: RingtoneToggledIcon,\n    untoggledSrc: RingtoneUntoggledIcon,\n  } as IDashboard,\n];\n","import { ITask } from \"../../interface/ITask\";\nimport { enumTaskStatus } from \"../../enum/enumTaskStatus\";\nexport const initTaskBuffer: ITask = {\n  name: \"\",\n  point: 0,\n  isContentOn: false,\n  status: enumTaskStatus.Todo,\n  createdOn: 0,\n  modifiedOn: 0,\n} as ITask;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport { enumDashboardType } from \"./enum/enumDashboardType\";\nimport { ITask } from \"./interface/ITask\";\nimport { IDashboard } from \"./interface/IDashboard\";\nimport { initDashboards } from \"./components/initDashboards\";\nimport { initTaskBuffer } from \"./components/task/initTaskBuffer\";\nimport { enumDashboardToggleType } from \"./enum/enumDashboardToggleType\";\n\nconst Container: any = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: transparent;\n  display: flex;\n`;\nconst TimerWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(65% - 80px)\" : \"calc(100% - 80px)\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n`;\nconst DashboardWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(35% + 80px)\" : \"80px\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\n\nconst App: () => JSX.Element = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(true as boolean);\n  const [dashboards, setDashboards] = useState(initDashboards as IDashboard[]);\n  const [taskBuffer, setTaskBuffer] = useState(initTaskBuffer as ITask);\n  const [tasks, setTasks] = useState([] as ITask[]);\n\n  const handleTaskBufferOnChange: (e: any) => void = (e: any) => {\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    cloneTaskBuffer[e.target.name] = e.target.value;\n    setTaskBuffer(cloneTaskBuffer);\n  };\n\n  const handleAddNewTaskOnClick: () => void = () => {\n    const cloneTasks: ITask[] = [...tasks];\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    const timeStamp: number = new Date().getTime();\n    [cloneTaskBuffer.createdOn, cloneTaskBuffer.modifiedOn] = [timeStamp, timeStamp];\n    cloneTasks.push(cloneTaskBuffer);\n    setTasks(cloneTasks);\n    setTaskBuffer(initTaskBuffer);\n  };\n\n  const handleDashboardToggleOnClick: (e: any, dashboardType?: enumDashboardType) => void = (\n    e: any,\n    dashboardType?: enumDashboardType\n  ) => {\n    if (e.target.name === enumDashboardToggleType.Tag) {\n      setIsDashboardOn(!isDashboardOn);\n      return;\n    }\n    const dashboardIsOpened: IDashboard = dashboards.find(dashboard => dashboard.status === true);\n    if (dashboardIsOpened.type === dashboardType) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    if (dashboardIsOpened.type !== dashboardType && isDashboardOn === false) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    const cloneDashboards: IDashboard[] = [...dashboards];\n    cloneDashboards.forEach(dashboard => {\n      dashboard.type !== dashboardType ? (dashboard.status = false) : (dashboard.status = true);\n    });\n    setDashboards(cloneDashboards);\n  };\n\n  const handleTaskOnClick: (key: number) => void = (key: number) => {\n    const cloneTasks: ITask[] = [...tasks];\n    cloneTasks.forEach(task => {\n      if (task.createdOn === key) {\n        task.isContentOn = !task.isContentOn;\n      } else {\n        task.isContentOn = false;\n      }\n    });\n    setTasks(cloneTasks);\n  };\n\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn} />\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleDashboardToggleOnClick={handleDashboardToggleOnClick}\n        />\n        <Dashboard\n          taskBuffer={taskBuffer}\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          tasks={tasks}\n          handleTaskOnClick={handleTaskOnClick}\n          handleAddNewTaskOnClick={handleAddNewTaskOnClick}\n          handleTaskBufferOnChange={handleTaskBufferOnChange}\n        />\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}