{"version":3,"sources":["assets/icons/tomato_small_color.svg","assets/icons/tomato_small_gray.svg","assets/icons/arrow.svg","assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","components/DashboardNavbar.tsx","enum/enumDashboardType.tsx","components/task/FormBox.tsx","components/task/TomatoEstimater.tsx","components/shared/Button.tsx","components/task/AddNewTask.tsx","components/shared/List.tsx","enum/enumTaskStatus.tsx","components/task/TaskLists.tsx","components/Dashboard.tsx","components/initDashboards.tsx","initTaskBuffer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","enumDashboardType","Wrapper","styled","div","props","isDashboardOn","Toggle","imgSrc","Tag","tomato","arrow","DashboardNavbar","dashboards","map","dashboard","key","type","onClick","handleDashboardToggleOnClick","status","toggledSrc","untoggledSrc","handleDashboardTagOnClick","TomatoColorfulIcon","ArrowIcon","className","FormBox","title","children","prototype","PropTypes","string","Tomato","tomatoStatus","TomatoEstimater","useState","estimatedValueBuffer","setEstimatedValueBuffer","estimated","taskBuffer","index","id","onMouseOver","handleTomatosMouseOver","onMouseOut","e","cloneEstimated","i","handleTaskBufferOnChange","filter","length","tomatoGray","tomatoColor","Button","btnAction","btnStyle","btnText","AddNewTask","name","value","onChange","placeholder","handleAddNewTaskOnClick","enumTaskStatus","Left","Right","List","handleTaskOnClick","primaryKey","headerIcon","actionBtn","TabGroup","Tab","currentStatus","tabType","HeaderIcon","isContentOn","Task","Title","Content","FormGroup","BtnGroup","NoDatas","TaskLists","Todo","tabStatus","setTabStatus","ContentByTaskTypeMap","Map","Done","Archieve","Object","values","Number","tasks","task","sort","t1","t2","modifiedOn","sortedTask","createdOn","dot","get","array","DashboardTitle","Dashboard","current","find","db","dashboardByCurrentStatusMap","AnalyticsReport","RingTone","initDashboards","AddToggledIcon","AddUntoggledIcon","ListToggledIcon","ListUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","initTaskBuffer","Container","TimerWrapper","DashboardWrapper","App","setIsDashboardOn","setDashboards","setTaskBuffer","setTasks","dashboardType","dashboardIsOn","newDashboards","toggle","cloneTasks","forEach","cloneTaskBuffer","timeStamp","Date","getTime","push","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a61dc07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_gray.3ab2cbcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport { dashboardNavBarProps } from \"../typeAlias/dashboardNavBarProps\";\n\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  min-width: 80px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\nconst Toggle: any = styled.div<{ imgSrc: string }>`\n  background-image: ${props => `url(${props.imgSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.imgSrc})`};\n    cursor: pointer;\n  }\n`;\nconst Tag: any = styled.div<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 45px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  :hover {\n    cursor: pointer;\n  }\n  .tomato {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  .arrow {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar: (props: dashboardNavBarProps) => JSX.Element =props => {\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.dashboards.map(dashboard => {\n        return (\n          <Toggle\n            key={dashboard.type}\n            onClick={() => {\n              props.handleDashboardToggleOnClick(dashboard.type);\n            }}\n            imgSrc={dashboard.status ? dashboard.toggledSrc : dashboard.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={props.isDashboardOn}\n        onClick={() => {\n          props.handleDashboardTagOnClick(!props.isDashboardOn);\n        }}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n      >\n        <div className=\"tomato\" />\n        <div className=\"arrow\" />\n      </Tag>\n    </Wrapper>\n  );\n};\n\nexport default DashboardNavbar;\n","export enum enumDashboardType {\n  UnKnow = 0,\n  AddNewTask = 1,\n  TaskLists = 2,\n  AnalyticsReport = 3,\n  RingTone = 4,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  font-family: Lato;\n  margin-top: 25px;\n  .form-title {\n    color: #acacac;\n    font-size: 17px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  input {\n    width: 100%;\n    height: 50px;\n    margin: 10px 0;\n    border-radius: 5px;\n    background-color: #fcfcfc;\n    outline: none;\n    font-size: 19px;\n    color: #333333;\n    padding-left: 10px;\n  }\n`;\n\nconst FormBox: (props: any) => JSX.Element =props => {\n  return (\n    <Wrapper>\n      <div className=\"form-title\">{props.title}</div>\n      {props.children}\n    </Wrapper>\n  );\n};\n\nFormBox.prototype = {\n  title: PropTypes.string,\n};\n\nexport default FormBox;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport tomatoGray from \"../../assets/icons/tomato_small_gray.svg\";\nimport { ITask } from \"src/interface/ITask\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 50px;\n`;\nconst Tomato = styled.div<{ tomatoStatus: string; onMouseOver: any }>`\n  width: calc(100% / 15);\n  height: 100%;\n  background-image: ${props => `url(${props.tomatoStatus})`};\n  background-position: center;\n  background-size: 100%;\n  background-repeat: no-repeat;\n  transition: 0.2s ease-in;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TomatoEstimater: (props: {\n  taskBuffer: ITask;\n  handleTaskBufferOnChange: any;\n}) => JSX.Element =props => {\n  const [estimatedValueBuffer, setEstimatedValueBuffer] = useState(0);\n  const handleTomatosMouseOver: (index: number) => void =index => {\n    setEstimatedValueBuffer(index + 1);\n  };\n  const handleTomatosMouseOut: (index: number) => void =index => {\n    setEstimatedValueBuffer(0);\n  };\n  const { estimated } = props.taskBuffer;\n  return (\n    <Wrapper>\n      {estimated.map((tomato, index) => (\n        <Tomato\n          key={index}\n          id=\"estimated\"\n          onMouseOver={() => {\n            handleTomatosMouseOver(index);\n          }}\n          onMouseOut={() => {\n            handleTomatosMouseOut(index);\n          }}\n          onClick={e => {\n            let cloneEstimated: boolean[] = [...estimated];\n            cloneEstimated = cloneEstimated.map((e, i) => (i <= index ? true : false));\n            props.handleTaskBufferOnChange(e, cloneEstimated);\n          }}\n          tomatoStatus={\n            estimated.filter(e => e === true).length > index\n              ? tomatoColor\n              : tomatoGray && estimatedValueBuffer > index\n              ? tomatoColor\n              : tomatoGray\n          }\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default TomatoEstimater;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper: any = styled.div<{ btnStyle: object }>`\n  width: 80%;\n  border-radius: 30px;\n  height: 50px;\n  font-size: 19px;\n  font-family: Lato;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 30px;\n  color: #ea5548;\n  border: 3px solid #ea5548;\n  background-color: transparent;\n  transition: 0.1s linear;\n  :hover {\n    cursor: pointer;\n    color: #fcfcfc;\n    border: 3px solid #ea5548;\n    background-color: #ea5548;\n  }\n`;\n\nconst Button: (props: { btnText: string; btnStyle: object; btnAction: any }) => JSX.Element =props => {\n  return (\n    <Wrapper onClick={props.btnAction} btnStyle={props.btnStyle}>\n      {props.btnText}\n    </Wrapper>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FormBox from \"./FormBox\";\nimport TomatoEstimater from \"./TomatoEstimater\";\nimport Button from \"../shared/Button\";\nimport { addNewTaskProps } from \"../../typeAlias/addNewTaskProps\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst AddNewTask: (props: addNewTaskProps) => JSX.Element =props => {\n  const { name } = props.taskBuffer;\n  return (\n    <Wrapper>\n      {props.children}\n      <FormBox title=\"TASK TITLE\">\n        <input\n          name=\"name\"\n          value={name}\n          onChange={props.handleTaskBufferOnChange}\n          type=\"text\"\n          placeholder=\"My Second Task\"\n        />\n      </FormBox>\n      <FormBox title=\"ESTIMATED TOMOTO\">\n        <TomatoEstimater\n          handleTaskBufferOnChange={props.handleTaskBufferOnChange}\n          taskBuffer={props.taskBuffer}\n        />\n      </FormBox>\n      <Button btnAction={props.handleAddNewTaskOnClick} btnStyle={{}} btnText={`ADD TASK`} />\n    </Wrapper>\n  );\n};\n\nexport default AddNewTask;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #414141;\n  color: #fcfcfc;\n  min-width: 220px;\n  border-bottom: 1px solid #333333;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst Left = styled.div`\n  display: flex;\n  width: 90%;\n`;\nconst Right = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 15px;\n`;\nconst List = (props: {\n  headerIcon: JSX.Element;\n  title: JSX.Element;\n  actionBtn: JSX.Element;\n  handleTaskOnClick: any;\n  primaryKey: number;\n}) => {\n  return (\n    <Wrapper\n      onClick={() => {\n        props.handleTaskOnClick(props.primaryKey);\n      }}\n    >\n      <Left>\n        {props.headerIcon}\n        {props.title}\n      </Left>\n      <Right>{props.actionBtn}</Right>\n    </Wrapper>\n  );\n};\n\nexport default List;\n","export enum enumTaskStatus {\n  Unknow = 0,\n  Todo = 1,\n  Done = 2,\n  Archieve = 3,\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport List from \"../shared/List\";\nimport PropTypes from \"prop-types\";\nimport { enumTaskStatus } from \"src/enum/enumTaskStatus\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport FormBox from \"./FormBox\";\nimport { taskListsProps } from \"../../typeAlias/taskListsProps\";\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  color: #fcfcfc;\n`;\nconst TabGroup = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 80%;\n  height: 25px;\n  margin-top: 25px;\n`;\nconst Tab = styled.div<{ currentStatus: enumTaskStatus; tabType: enumTaskStatus }>`\n  min-width: 55px;\n  border-radius: 8px 8px 0 0;\n  width: calc(100% / 6);\n  height: 100%;\n  background-color: ${props => (props.currentStatus === props.tabType ? \"#ea5548\" : \"#606060\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Lato;\n  font-weight: bold;\n  font-size: 12px;\n  margin-right: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst HeaderIcon = styled.div<{ isContentOn: boolean }>`\n  background-image: url(${tomatoColor});\n  background-repeat: no-repeat;\n  background-size: 100%;\n  background-position: center;\n  width: calc(100% / 25);\n  min-width: 17px;\n  margin: 0px 15px;\n  opacity: ${props => {\n    return props.isContentOn ? \"100%\" : \"0%\";\n  }};\n  transition: 0.1s ease-in;\n`;\nconst Task = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  margin-top: 1px;\n`;\n\nconst Title = styled.div`\n  width: calc(100% / 3.5);\n  min-width: 120px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  .name {\n    font-family: Lato;\n    width: 100%;\n  }\n  .estimated {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    width: 100%;\n    .dot {\n      background-color: #ea5548;\n      border-radius: 100%;\n      width: 10px;\n      height: 10px;\n      margin-right: auto;\n    }\n  }\n`;\nconst Content = styled.div<{ isContentOn: boolean }>`\n  width: 80%;\n  height: ${props => (props.isContentOn ? \"380px\" : \"0\")};\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  background-color: #414141;\n  transition: all 0.1s ease-in-out;\n  overflow: hidden;\n`;\nconst FormGroup = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst BtnGroup = styled.div`\n  width: 80%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst NoDatas = styled.div`\n  width: 80%;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  font-family: Lato;\n  margin-top: 30px;\n`;\n\nconst TaskLists = (props: taskListsProps) => {\n  const [tabStatus, setTabStatus] = useState(enumTaskStatus.Todo);\n  const handleTabStatusOnClick = (tabType: enumTaskStatus) => {\n    setTabStatus(tabType);\n  };\n\n  const ContentByTaskTypeMap: Map<enumTaskStatus, JSX.Element> = new Map([\n    [\n      enumTaskStatus.Todo,\n      <FormGroup>\n        <FormBox title=\"TASK TITLE\">\n          <input type=\"text\" placeholder=\"My Second Task\" />\n        </FormBox>\n        <FormBox title=\"ESTIMATED TOMOTO\">{/* <TomatoEstimater /> */}</FormBox>\n        <BtnGroup>\n          {/* <Button btnStyle={{}} btnText=\"Archive\" />\n          <Button btnStyle={{}} btnText=\"SAVE\" /> */}\n        </BtnGroup>\n      </FormGroup>,\n    ],\n    [enumTaskStatus.Done, null],\n    [enumTaskStatus.Archieve, null],\n  ]);\n  return (\n    <Wrapper>\n      {props.children}\n      <TabGroup>\n        {Object.values(enumTaskStatus)\n          .filter(status => Number(status) > 0)\n          .map(status => {\n            return (\n              <Tab\n                key={status}\n                currentStatus={tabStatus}\n                tabType={status as enumTaskStatus}\n                onClick={() => {\n                  handleTabStatusOnClick(status as enumTaskStatus);\n                }}\n              >\n                {enumTaskStatus[status]}\n              </Tab>\n            );\n          })}\n      </TabGroup>\n      {props.tasks.filter(task => task.status === tabStatus).length > 0 ? (\n        props.tasks\n          .filter(task => task.status === tabStatus)\n          .sort((t1, t2) => (t1.modifiedOn > t2.modifiedOn ? -1 : 1))\n          .map(sortedTask => (\n            <Task key={sortedTask.createdOn}>\n              <List\n                primaryKey={sortedTask.createdOn}\n                handleTaskOnClick={props.handleTaskOnClick}\n                headerIcon={<HeaderIcon isContentOn={sortedTask.isContentOn} />}\n                actionBtn={<i className=\"fas fa-ellipsis-h fa-lg\"></i>}\n                title={\n                  <Title>\n                    <div className=\"name\">{sortedTask.name}</div>\n                    <div className=\"estimated\">\n                      {[1, 2, 3, 4, 5, 6, 7, 8].map((dot, index) => {\n                        return <div key={index} className=\"dot\"></div>;\n                      })}\n                    </div>\n                  </Title>\n                }\n              />\n              <Content isContentOn={sortedTask.isContentOn}>\n                {ContentByTaskTypeMap.get(sortedTask.status)}\n              </Content>\n            </Task>\n          ))\n      ) : (\n        <NoDatas>No {enumTaskStatus[tabStatus]} Tasks</NoDatas>\n      )}\n    </Wrapper>\n  );\n};\n\nTaskLists.prototype = {\n  tasks: PropTypes.array,\n};\n\nexport default TaskLists;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { enumDashboardType } from \"src/enum/enumDashboardType\";\nimport AddNewTask from \"./task/AddNewTask\";\nimport TaskLists from \"./task/TaskLists\";\nimport { IDashboard } from \"src/interface/IDashboard\";\nimport { dashboardProps } from \"../typeAlias/dashboardProps\";\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${(props) => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n  overflow: hidden;\n`;\nconst DashboardTitle: any = styled.div`\n  width: 80%;\n  color: #fcfcfc;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: Lato;\n  padding: 25px 0;\n  margin-top: 5px;\n  border-bottom: 1px solid #414141;\n`;\n\nconst Dashboard: (props: dashboardProps) => JSX.Element = (props) => {\n  const current: IDashboard = props.dashboards.find((db) => db.status === true);\n  const dashboardByCurrentStatusMap: Map<enumDashboardType, JSX.Element> = new Map([\n    [\n      enumDashboardType.AddNewTask,\n      <AddNewTask\n        taskBuffer={props.taskBuffer}\n        handleAddNewTaskOnClick={props.handleAddNewTaskOnClick}\n        handleTaskBufferOnChange={props.handleTaskBufferOnChange}\n      >\n        <DashboardTitle>{current.name}</DashboardTitle>\n      </AddNewTask>,\n    ],\n    [\n      enumDashboardType.TaskLists,\n      <TaskLists handleTaskOnClick={props.handleTaskOnClick} tasks={props.tasks}>\n        <DashboardTitle>{current.name}</DashboardTitle>\n      </TaskLists>,\n    ],\n    [enumDashboardType.AnalyticsReport, null],\n    [enumDashboardType.RingTone, null],\n  ]);\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.isDashboardOn ? dashboardByCurrentStatusMap.get(current.type) : null}\n    </Wrapper>\n  );\n};\n\nexport default Dashboard;\n","import ListUntoggledIcon from \"../assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"../assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"../assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"../assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"../assets/icons/list_red.svg\";\nimport AddToggledIcon from \"../assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"../assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"../assets/icons/analysis_red.svg\";\nimport { enumDashboardType } from \"../enum/enumDashboardType\";\nimport { IDashboard } from \"../interface/IDashboard\";\nexport const initDashboards: IDashboard[] = [\n  {\n    type: enumDashboardType.AddNewTask,\n    status: true,\n    name: \"ADD NEW TASK\",\n    toggledSrc: AddToggledIcon,\n    untoggledSrc: AddUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.TaskLists,\n    status: false,\n    name: \"TASK LISTS\",\n    toggledSrc: ListToggledIcon,\n    untoggledSrc: ListUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.AnalyticsReport,\n    status: false,\n    name: \"ANALYTICS REPORT\",\n    toggledSrc: AnalysisToggledIcon,\n    untoggledSrc: AnalysisUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.RingTone,\n    status: false,\n    name: \"RING TONE\",\n    toggledSrc: RingtoneToggledIcon,\n    untoggledSrc: RingtoneUntoggledIcon,\n  } as IDashboard,\n];\n","import { ITask } from \"./interface/ITask\";\nimport { enumTaskStatus } from \"./enum/enumTaskStatus\";\nexport const initTaskBuffer: ITask = {\n  name: \"\",\n  estimated: [false, false, false, false, false, false, false, false, false, false],\n  isContentOn: false,\n  status: enumTaskStatus.Todo,\n  createdOn: 0,\n  modifiedOn: 0,\n} as ITask;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport { enumDashboardType } from \"./enum/enumDashboardType\";\nimport { ITask } from \"./interface/ITask\";\nimport { IDashboard } from \"./interface/IDashboard\";\nimport { initDashboards } from \"./components/initDashboards\";\nimport { initTaskBuffer } from \"./initTaskBuffer\";\n\nconst Container: any = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: transparent;\n  display: flex;\n`;\nconst TimerWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(65% - 80px)\" : \"calc(100% - 80px)\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n`;\nconst DashboardWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(35% + 80px)\" : \"80px\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\n\nconst App: () => JSX.Element = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(true as boolean);\n  const [dashboards, setDashboards] = useState(initDashboards as IDashboard[]);\n  const [taskBuffer, setTaskBuffer] = useState(initTaskBuffer as ITask);\n  const [tasks, setTasks] = useState([] as ITask[]);\n\n  const handleTaskBufferOnChange: (e: any, estimated?: boolean[]) => void = (\n    e: any,\n    estimated?: boolean[]\n  ) => {\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    if (e.target.id === \"estimated\") {\n      cloneTaskBuffer[e.target.id] = estimated;\n    }\n    cloneTaskBuffer[e.target.name] = e.target.value;\n    setTaskBuffer(cloneTaskBuffer);\n  };\n\n  const handleAddNewTaskOnClick: () => void = () => {\n    const cloneTasks: ITask[] = [...tasks];\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    const timeStamp: number = new Date().getTime();\n    [cloneTaskBuffer.createdOn, cloneTaskBuffer.modifiedOn] = [timeStamp, timeStamp];\n    cloneTasks.push(cloneTaskBuffer);\n    setTasks(cloneTasks);\n    setTaskBuffer(initTaskBuffer);\n  };\n\n  const handleDashboardToggleOnClick: (dashboardType: enumDashboardType) => void = (\n    dashboardType: enumDashboardType\n  ) => {\n    const dashboardIsOn: IDashboard = dashboards.find(dashboard => dashboard.status === true);\n    if (dashboardIsOn.type === dashboardType) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    if (dashboardIsOn.type !== dashboardType && isDashboardOn === false) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    const cloneDashboards: IDashboard[] = [...dashboards];\n    const newDashboards: IDashboard[] = cloneDashboards.map(dashboard => {\n      dashboard.type !== dashboardType ? (dashboard.status = false) : (dashboard.status = true);\n      return dashboard;\n    });\n    setDashboards(newDashboards);\n  };\n  const handleDashboardTagOnClick: (toggle: boolean) => void = (toggle: boolean) => {\n    setIsDashboardOn(toggle);\n  };\n  const handleTaskOnClick: (key: number) => void = (key: number) => {\n    const cloneTasks: ITask[] = [...tasks];\n    cloneTasks.forEach(task => {\n      if (task.createdOn === key) {\n        task.isContentOn = !task.isContentOn;\n      } else {\n        task.isContentOn = false;\n      }\n    });\n    setTasks(cloneTasks);\n  };\n\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn} />\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleDashboardToggleOnClick={handleDashboardToggleOnClick}\n          handleDashboardTagOnClick={handleDashboardTagOnClick}\n        />\n        <Dashboard\n          taskBuffer={taskBuffer}\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          tasks={tasks}\n          handleTaskOnClick={handleTaskOnClick}\n          handleAddNewTaskOnClick={handleAddNewTaskOnClick}\n          handleTaskBufferOnChange={handleTaskBufferOnChange}\n        />\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}