{"version":3,"sources":["assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","components/DashBoard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Wrapper","styled","div","Toggle","props","untoggledSrc","toggledSrc","DashBoard","toggles","map","toggle","index","key","toggleName","ListToggledIcon","ListUntoggledIcon","AddToggledIcon","AddUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","Container","TimerWrapper","DashBoardWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gxBCW3C,IAAMC,EAAeC,IAAOC,IAAV,KAQZC,EAAcF,IAAOC,IAAV,KACK,SAAAE,GAAK,oBAAWA,EAAMC,aAAjB,QAOH,SAAAD,GAAK,oBAAWA,EAAME,WAAjB,QAqBdC,EAhBG,WAChB,OACE,kBAACP,EAAD,KACGQ,EAAQC,KAAI,SAACC,EAAQC,GACpB,OACE,kBAACR,EAAD,CACES,IAAKD,EACLL,WAAYI,EAAOJ,WACnBD,aAAcK,EAAOL,oBAU3BG,EAAe,CACnB,CACEK,WAAY,OACZP,WAAYQ,IACZT,aAAcU,KAEhB,CACEF,WAAY,MACZP,WAAYU,IACZX,aAAcY,KAEhB,CACEJ,WAAY,WACZP,WAAYY,IACZb,aAAcc,KAEhB,CACEN,WAAY,WACZP,WAAYc,IACZf,aAAcgB,M,kaChElB,IAAMC,EAAYrB,IAAOC,IAAV,KAMTqB,EAAetB,IAAOC,IAAV,KAKZsB,EAAmBvB,IAAOC,IAAV,KAgBPuB,EAXH,WACV,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,MACA,kBAACC,EAAD,KACE,kBAAC,EAAD,SCdYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0836ffce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport ListUntoggledIcon from \"../assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"../assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"../assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"../assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"../assets/icons/list_red.svg\";\nimport AddToggledIcon from \"../assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"../assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"../assets/icons/analysis_red.svg\";\n\nconst Wrapper: any = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`;\n\nconst Toggle: any = styled.div<{ toggledSrc: string; untoggledSrc: string }>`\n  background-image: ${props => `url(${props.untoggledSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.toggledSrc})`};\n    cursor: pointer;\n  }\n`;\n\nconst DashBoard = () => {\n  return (\n    <Wrapper>\n      {toggles.map((toggle, index) => {\n        return (\n          <Toggle\n            key={index}\n            toggledSrc={toggle.toggledSrc}\n            untoggledSrc={toggle.untoggledSrc}\n          />\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nexport default DashBoard;\n\nconst toggles: any = [\n  {\n    toggleName: \"List\",\n    toggledSrc: ListToggledIcon,\n    untoggledSrc: ListUntoggledIcon,\n  },\n  {\n    toggleName: \"Add\",\n    toggledSrc: AddToggledIcon,\n    untoggledSrc: AddUntoggledIcon,\n  },\n  {\n    toggleName: \"Analysis\",\n    toggledSrc: AnalysisToggledIcon,\n    untoggledSrc: AnalysisUntoggledIcon,\n  },\n  {\n    toggleName: \"Ringtone\",\n    toggledSrc: RingtoneToggledIcon,\n    untoggledSrc: RingtoneUntoggledIcon,\n  },\n];\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport DashBoard from \"./components/DashBoard\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  background-color: #eeeeee;\n  display: flex;\n`;\nconst TimerWrapper = styled.div`\n  width: 95%;\n  height: 100%;\n  background-color: #eaeaea;\n`;\nconst DashBoardWrapper = styled.div`\n  width: 5%;\n  height: 100%;\n  background-color: #333333;\n`;\nconst App = () => {\n  return (\n    <Container>\n      <TimerWrapper></TimerWrapper>\n      <DashBoardWrapper>\n        <DashBoard></DashBoard>\n      </DashBoardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}