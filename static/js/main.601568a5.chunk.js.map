{"version":3,"sources":["assets/icons/tomato_small_color.svg","assets/icons/tomato_small_gray.svg","assets/icons/arrow.svg","assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","components/DashboardNavbar.tsx","enum/enumDashboardType.tsx","components/task/FormBox.tsx","components/task/TomatoEstimater.tsx","components/shared/Button.tsx","components/task/AddNewTask.tsx","components/shared/List.tsx","enum/enumTaskStatus.tsx","components/task/TaskLists.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Wrapper","styled","div","props","isDashboardOn","Toggle","imgSrc","Tag","tomato","arrow","DashboardNavbar","dashboards","map","dashboard","key","type","onClick","handleDashboardToggleOnClick","status","toggledSrc","untoggledSrc","handleDashboardTagOnClick","TomatoColorfulIcon","ArrowIcon","className","prototype","PropTypes","func","bool","array","enumDashboardType","FormBox","title","children","string","Tomato","tomatoStatus","TomatoEstimater","useState","tomatos","estimatedValue","setEstimatedValue","estimatedValueBuffer","setEstimatedValueBuffer","index","onMouseOver","handleTomatosMouseOver","onMouseOut","handleTomatosClick","tomatoGray","tomatoColor","Button","btnStyle","btnText","object","AddNewTask","placeholder","enumTaskStatus","Left","Right","List","handleTaskOnClick","primaryKey","headerIcon","actionBtn","TabGroup","Tab","currentStatus","tabType","HeaderIcon","isContentOn","Task","Title","Content","NoDatas","TaskLists","Todo","tabStatus","setTabStatus","Object","values","filter","Number","tasks","task","length","sort","t1","t2","modifiedOn","sortedTask","createdOn","name","dot","DashboardTitle","Dashboard","current","find","db","AnalyticsReport","RingTone","Error","getCurrentDashboard","Container","TimerWrapper","DashboardWrapper","App","setIsDashboardOn","AddToggledIcon","AddUntoggledIcon","ListToggledIcon","ListUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","setDashboards","estimated","Date","getTime","Done","setTasks","dashboardType","dashboardIsOn","newDashboards","toggle","cloneTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.601568a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_gray.3ab2cbcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  min-width: 80px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\n\nconst Toggle: any = styled.div<{ imgSrc: string }>`\n  background-image: ${props => `url(${props.imgSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.imgSrc})`};\n    cursor: pointer;\n  }\n`;\n\nconst Tag = styled.div<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 45px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  :hover {\n    cursor: pointer;\n  }\n  .tomato {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  .arrow {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar =props => {\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.dashboards.map(dashboard => {\n        return (\n          <Toggle\n            key={dashboard.type}\n            onClick={() => {\n              props.handleDashboardToggleOnClick(dashboard.type);\n            }}\n            imgSrc={dashboard.status ? dashboard.toggledSrc : dashboard.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={props.isDashboardOn}\n        onClick={() => {\n          props.handleDashboardTagOnClick(!props.isDashboardOn);\n        }}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n      >\n        <div className=\"tomato\" />\n        <div className=\"arrow\" />\n      </Tag>\n    </Wrapper>\n  );\n};\nDashboardNavbar.prototype = {\n  handleDashboardToggleOnClick: PropTypes.func,\n  handleDashboardTagOnClick: PropTypes.func,\n  isDashboardOn: PropTypes.bool,\n  dashboards: PropTypes.array,\n};\n\nexport default DashboardNavbar;\n","export enum enumDashboardType {\n  UnKnow = 0,\n  AddNewTask = 1,\n  TaskLists = 2,\n  AnalyticsReport = 3,\n  RingTone = 4,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  font-family: Lato;\n  margin-top: 25px;\n  .form-title {\n    color: #acacac;\n    font-size: 17px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  input {\n    width: 100%;\n    height: 50px;\n    margin: 10px 0;\n    border-radius: 5px;\n    background-color: #fcfcfc;\n    outline: none;\n    font-size: 19px;\n    color: #333333;\n    padding-left: 10px;\n  }\n`;\n\nconst FormBox: (props: any) => JSX.Element =props => {\n  return (\n    <Wrapper>\n      <div className=\"form-title\">{props.title}</div>\n      {props.children}\n    </Wrapper>\n  );\n};\n\nFormBox.prototype = {\n  title: PropTypes.string,\n};\n\nexport default FormBox;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport tomatoGray from \"../../assets/icons/tomato_small_gray.svg\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 50px;\n`;\nconst Tomato = styled.div<{ tomatoStatus: string; onMouseOver: any }>`\n  width: calc(100% / 15);\n  height: 100%;\n  background-image: ${props => `url(${props.tomatoStatus})`};\n  background-position: center;\n  background-size: 100%;\n  background-repeat: no-repeat;\n  transition: 0.2s ease-in;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TomatoEstimater = () => {\n  const [tomatos] = useState([\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n  ]);\n  const [estimatedValue, setEstimatedValue] = useState(0);\n  const [estimatedValueBuffer, setEstimatedValueBuffer] = useState(0);\n  const handleTomatosMouseOver: (index: number) => void =index => {\n    setEstimatedValueBuffer(index + 1);\n  };\n  const handleTomatosMouseOut: (index: number) => void =index => {\n    setEstimatedValueBuffer(0);\n  };\n  const handleTomatosClick: (index: number) => void =index => {\n    setEstimatedValue(index + 1);\n  };\n  return (\n    <Wrapper>\n      {tomatos.map((tomato, index) => (\n        <Tomato\n          key={index}\n          onMouseOver={() => {\n            handleTomatosMouseOver(index);\n          }}\n          onMouseOut={() => {\n            handleTomatosMouseOut(index);\n          }}\n          onClick={() => {\n            handleTomatosClick(index);\n          }}\n          tomatoStatus={\n            estimatedValue > index\n              ? tomatoColor\n              : tomatoGray && estimatedValueBuffer > index\n              ? tomatoColor\n              : tomatoGray\n          }\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default TomatoEstimater;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper: any = styled.div<{ btnStyle: object }>`\n  width: 80%;\n  border-radius: 30px;\n  height: 50px;\n  font-size: 19px;\n  font-family: Lato;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 50px;\n\n  color: #ea5548;\n  border: 3px solid #ea5548;\n  background-color: transparent;\n  transition: 0.1s linear;\n  :hover {\n    cursor: pointer;\n    color: #fcfcfc;\n    border: 3px solid #ea5548;\n    background-color: #ea5548;\n  }\n`;\n\nconst Button: (props: any) => JSX.Element =props => {\n  return <Wrapper btnStyle={props.btnStyle}>{props.btnText}</Wrapper>;\n};\n\nButton.prototype = {\n  btnText: PropTypes.string,\n  btnStyle: PropTypes.object,\n};\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FormBox from \"./FormBox\";\nimport TomatoEstimater from \"./TomatoEstimater\";\nimport Button from \"../shared/Button\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst AddNewTask =props => {\n  return (\n    <Wrapper>\n      {props.children}\n      <FormBox title=\"TASK TITLE\">\n        <input type=\"text\" placeholder=\"My Second Task\" />\n      </FormBox>\n      <FormBox title=\"ESTIMATED TOMOTO\">\n        <TomatoEstimater />\n      </FormBox>\n      <Button btnStyle={{}} btnText={`ADD TASK`}></Button>\n    </Wrapper>\n  );\n};\n\nexport default AddNewTask;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #414141;\n  color: #fcfcfc;\n  min-width: 220px;\n  border-bottom: 1px solid #333333;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst Left = styled.div`\n  display: flex;\n  width: 90%;\n`;\nconst Right = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 15px;\n`;\nconst List = (props: {\n  headerIcon: JSX.Element;\n  title: JSX.Element;\n  actionBtn: JSX.Element;\n  handleTaskOnClick: any;\n  primaryKey: number;\n}) => {\n  return (\n    <Wrapper\n      onClick={() => {\n        props.handleTaskOnClick(props.primaryKey);\n      }}\n    >\n      <Left>\n        {props.headerIcon}\n        {props.title}\n      </Left>\n      <Right>{props.actionBtn}</Right>\n    </Wrapper>\n  );\n};\n\nexport default List;\n","export enum enumTaskStatus {\n  Unknow = 0,\n  Todo = 1,\n  Done = 2,\n  Archieve = 3,\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport List from \"../shared/List\";\nimport PropTypes from \"prop-types\";\nimport { enumTaskStatus } from \"src/enum/enumTaskStatus\";\nimport { ITask } from \"src/interface/ITask\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  color: #fcfcfc;\n`;\nconst TabGroup = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 80%;\n  height: 25px;\n  margin-top: 25px;\n`;\nconst Tab = styled.div<{ currentStatus: enumTaskStatus; tabType: enumTaskStatus }>`\n  min-width: 55px;\n  border-radius: 8px 8px 0 0;\n  width: calc(100% / 6);\n  height: 100%;\n  background-color: ${props => (props.currentStatus === props.tabType ? \"#ea5548\" : \"#606060\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Lato;\n  font-weight: bold;\n  font-size: 12px;\n  margin-right: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst HeaderIcon = styled.div<{ isContentOn: boolean }>`\n  background-image: url(${tomatoColor});\n  background-repeat: no-repeat;\n  background-size: 100%;\n  background-position: center;\n  width: calc(100% / 25);\n  min-width: 17px;\n  margin: 0px 15px;\n  opacity: ${props => {\n    return props.isContentOn ? \"100%\" : \"0%\";\n  }};\n  transition: 0.1s ease-in;\n`;\nconst Task = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  margin-top: 1px;\n`;\n\nconst Title = styled.div`\n  width: calc(100% / 3.5);\n  min-width: 120px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  .name {\n    font-family: Lato;\n    width: 100%;\n  }\n  .estimated {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    width: 100%;\n    .dot {\n      background-color: #ea5548;\n      border-radius: 100%;\n      width: 10px;\n      height: 10px;\n      margin-right: auto;\n    }\n  }\n`;\nconst Content = styled.div<{ isContentOn: boolean }>`\n  width: 80%;\n  height: ${props => (props.isContentOn ? \"200px\" : \"0\")};\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  background-color: #414141;\n  transition: all 0.1s ease-in-out;\n  overflow: hidden;\n`;\n\nconst NoDatas = styled.div`\n  width: 80%;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  font-family: Lato;\n  margin-top: 30px;\n`;\n\nconst TaskLists = (props: { children: any; tasks: ITask[]; handleTaskOnClick: any }) => {\n  const [tabStatus, setTabStatus] = useState(enumTaskStatus.Todo);\n  const handleTabStatusOnClick = (tabType: enumTaskStatus) => {\n    setTabStatus(tabType);\n  };\n  return (\n    <Wrapper>\n      {props.children}\n      <TabGroup>\n        {Object.values(enumTaskStatus)\n          .filter(status => Number(status) > 0)\n          .map(status => {\n            return (\n              <Tab\n                key={status}\n                currentStatus={tabStatus}\n                tabType={status as enumTaskStatus}\n                onClick={() => {\n                  handleTabStatusOnClick(status as enumTaskStatus);\n                }}\n              >\n                {enumTaskStatus[status]}\n              </Tab>\n            );\n          })}\n      </TabGroup>\n      {props.tasks.filter(task => task.status === tabStatus).length > 0 ? (\n        props.tasks\n          .filter(task => task.status === tabStatus)\n          .sort((t1, t2) => (t1.modifiedOn > t2.modifiedOn ? -1 : 1))\n          .map(sortedTask => (\n            <Task>\n              <List\n                key={sortedTask.createdOn}\n                headerIcon={<HeaderIcon isContentOn={sortedTask.isContentOn} />}\n                handleTaskOnClick={props.handleTaskOnClick}\n                primaryKey={sortedTask.createdOn}\n                title={\n                  <Title>\n                    <div className=\"name\">{sortedTask.name}</div>\n                    <div className=\"estimated\">\n                      {[1, 2, 3, 4, 5, 6, 7, 8].map((dot, index) => {\n                        return <div key={index} className=\"dot\"></div>;\n                      })}\n                    </div>\n                  </Title>\n                }\n                actionBtn={<i className=\"fas fa-ellipsis-h fa-lg\"></i>}\n              />\n              <Content isContentOn={sortedTask.isContentOn}></Content>\n            </Task>\n          ))\n      ) : (\n        <NoDatas>No {enumTaskStatus[tabStatus]} Tasks</NoDatas>\n      )}\n    </Wrapper>\n  );\n};\n\nTaskLists.prototype = {\n  tasks: PropTypes.array,\n};\n\nexport default TaskLists;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { enumDashboardType } from \"src/enum/enumDashboardType\";\nimport AddNewTask from \"./task/AddNewTask\";\nimport TaskLists from \"./task/TaskLists\";\nconst Wrapper = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n  overflow: hidden;\n`;\nconst DashboardTitle = styled.div`\n  width: 80%;\n  color: #fcfcfc;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: Lato;\n  padding: 25px 0;\n  margin-top: 5px;\n  border-bottom: 1px solid #414141;\n`;\n\nconst Dashboard: (props: any) => JSX.Element =props => {\n  const getCurrentDashboard: () => JSX.Element = () => {\n    const current = props.dashboards.find(db => db.status === true);\n    switch (current.type) {\n      case enumDashboardType.AddNewTask:\n        return (\n          <AddNewTask>\n            <DashboardTitle>{current.name}</DashboardTitle>\n          </AddNewTask>\n        );\n      case enumDashboardType.TaskLists:\n        return (\n          <TaskLists handleTaskOnClick={props.handleTaskOnClick} tasks={props.tasks}>\n            <DashboardTitle>{current.name}</DashboardTitle>\n          </TaskLists>\n        );\n      case enumDashboardType.AnalyticsReport:\n        return <DashboardTitle>{current.name}</DashboardTitle>;\n      case enumDashboardType.RingTone:\n        return <DashboardTitle>{current.name}</DashboardTitle>;\n      default:\n        throw new Error(\"error\");\n    }\n  };\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {props.isDashboardOn ? getCurrentDashboard() : null}\n    </Wrapper>\n  );\n};\n\nDashboard.prototype = {\n  isDashboardOn: PropTypes.bool,\n  dashboards: PropTypes.array,\n  tasks: PropTypes.array,\n};\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport ListUntoggledIcon from \"./assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"./assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"./assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"./assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"./assets/icons/list_red.svg\";\nimport AddToggledIcon from \"./assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"./assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"./assets/icons/analysis_red.svg\";\nimport { enumDashboardType } from \"./enum/enumDashboardType\";\nimport { enumTaskStatus } from \"./enum/enumTaskStatus\";\nimport { ITask } from \"./interface/ITask\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: transparent;\n  display: flex;\n`;\nconst TimerWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(65% - 80px)\" : \"calc(100% - 80px)\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n`;\nconst DashboardWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(35% + 80px)\" : \"80px\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\n\nconst App = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(true);\n  const [dashboards, setDashboards] = useState([\n    {\n      type: enumDashboardType.AddNewTask,\n      status: false,\n      name: \"ADD NEW TASK\",\n      toggledSrc: AddToggledIcon,\n      untoggledSrc: AddUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.TaskLists,\n      status: true,\n      name: \"TASK LISTS\",\n      toggledSrc: ListToggledIcon,\n      untoggledSrc: ListUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.AnalyticsReport,\n      status: false,\n      name: \"ANALYTICS REPORT\",\n      toggledSrc: AnalysisToggledIcon,\n      untoggledSrc: AnalysisUntoggledIcon,\n    },\n    {\n      type: enumDashboardType.RingTone,\n      status: false,\n      name: \"RING TONE\",\n      toggledSrc: RingtoneToggledIcon,\n      untoggledSrc: RingtoneUntoggledIcon,\n    },\n  ]);\n\n  const [tasks, setTasks] = useState([\n    {\n      name: \"First Task\",\n      estimated: 5,\n      status: enumTaskStatus.Todo,\n      isContentOn: false,\n      createdOn: 12345,\n      modifiedOn: new Date().getTime(),\n    } as ITask,\n    {\n      name: \"Second Task\",\n      estimated: 3,\n      status: enumTaskStatus.Todo,\n      isContentOn: true,\n      createdOn: 12346,\n      modifiedOn: new Date().getTime(),\n    } as ITask,\n    {\n      name: \"Third Task\",\n      estimated: 7,\n      status: enumTaskStatus.Done,\n      isContentOn: false,\n      createdOn: 12347,\n      modifiedOn: new Date().getTime(),\n    } as ITask,\n  ]);\n\n  const handleDashboardToggleOnClick: (dashboardType: enumDashboardType) => void = (\n    dashboardType: enumDashboardType\n  ) => {\n    const dashboardIsOn: any = dashboards.find(dashboard => dashboard.status === true);\n    if (dashboardIsOn.type === dashboardType) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    if (dashboardIsOn.type !== dashboardType && isDashboardOn === false) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    const cloneDashboards: any[] = [...dashboards];\n    const newDashboards: any[] = cloneDashboards.map(dashboard => {\n      dashboard.type !== dashboardType ? (dashboard.status = false) : (dashboard.status = true);\n      return dashboard;\n    });\n    setDashboards(newDashboards);\n  };\n  const handleDashboardTagOnClick: (toggle: boolean) => void = (toggle: boolean) => {\n    setIsDashboardOn(toggle);\n  };\n\n  const handleTaskOnClick: (key: number) => void = (key: number) => {\n    const cloneTasks: ITask[] = [...tasks];\n    cloneTasks.map(task => {\n      if (task.createdOn === key) {\n        task.isContentOn = !task.isContentOn;\n      } else {\n        task.isContentOn = false;\n      }\n    });\n    setTasks(cloneTasks);\n  };\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn} />\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleDashboardToggleOnClick={handleDashboardToggleOnClick}\n          handleDashboardTagOnClick={handleDashboardTagOnClick}\n        />\n        <Dashboard\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          tasks={tasks}\n          handleTaskOnClick={handleTaskOnClick}\n        />\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}