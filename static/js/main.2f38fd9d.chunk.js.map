{"version":3,"sources":["assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","assets/icons/tomato_small_color.svg","assets/icons/arrow.svg","components/DashboardNavbar.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Wrapper","styled","div","props","isDashboardOn","Toggle","untoggledSrc","toggledSrc","Tag","tomato","arrow","DashboardNavbar","toggles","map","toggle","index","key","onClick","e","dashboardToggleHandler","TomatoColorfulIcon","ArrowIcon","className","prototype","PropTypes","func","bool","toggleName","ListToggledIcon","ListUntoggledIcon","AddToggledIcon","AddUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","Dashboard","Container","TimerWrapper","DashboardWrapper","App","useState","setIsDashboardOn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f38fd9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport ListUntoggledIcon from \"../assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"../assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"../assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"../assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"../assets/icons/list_red.svg\";\nimport AddToggledIcon from \"../assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"../assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"../assets/icons/analysis_red.svg\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport PropTypes from \"prop-types\";\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: 5vw;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\n\nconst Toggle: any = styled.div<{ toggledSrc: string; untoggledSrc: string }>`\n  background-image: ${props => `url(${props.untoggledSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.toggledSrc})`};\n    cursor: pointer;\n  }\n`;\n\nconst Tag = styled.div<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 25px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  :hover {\n    cursor: pointer;\n  }\n  .tomato {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  .arrow {\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar =props => {\n  return (\n    <Wrapper isDashboardOn={props.isDashboardOn}>\n      {toggles.map((toggle, index) => {\n        return (\n          <Toggle\n            key={index}\n            onClick={e => {\n              if (props.isDashboardOn === true) {\n                return; // TODO: should change content or do nothing.\n              }\n              props.dashboardToggleHandler(e, !props.isDashboardOn);\n            }}\n            toggledSrc={toggle.toggledSrc}\n            untoggledSrc={toggle.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={props.isDashboardOn}\n        onClick={e => {\n          props.dashboardToggleHandler(e, !props.isDashboardOn);\n        }}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n      >\n        <div className=\"tomato\" />\n        <div className=\"arrow\" />\n      </Tag>\n    </Wrapper>\n  );\n};\nDashboardNavbar.prototype = {\n  dashboardToggleHandler: PropTypes.func,\n  isDashboardOn: PropTypes.bool,\n};\n\nexport default DashboardNavbar;\n\nconst toggles: any = [\n  {\n    toggleName: \"List\",\n    toggledSrc: ListToggledIcon,\n    untoggledSrc: ListUntoggledIcon,\n  },\n  {\n    toggleName: \"Add\",\n    toggledSrc: AddToggledIcon,\n    untoggledSrc: AddUntoggledIcon,\n  },\n  {\n    toggleName: \"Analysis\",\n    toggledSrc: AnalysisToggledIcon,\n    untoggledSrc: AnalysisUntoggledIcon,\n  },\n  {\n    toggleName: \"Ringtone\",\n    toggledSrc: RingtoneToggledIcon,\n    untoggledSrc: RingtoneUntoggledIcon,\n  },\n];\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n`;\n\nconst Dashboard =props => {\n  return <Wrapper isDashboardOn={props.isDashboardOn}></Wrapper>;\n};\n\nDashboard.prototype = {\n  isDashboardOn: PropTypes.bool,\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: #eeeeee;\n  display: flex;\n`;\nconst TimerWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"60vw\" : \"95vw\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n`;\nconst DashboardWrapper = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"40vw\" : \"5vw\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\nconst App = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(false);\n\n  const dashboardToggleHandler = (e, toggle: boolean) => {\n    setIsDashboardOn(toggle);\n  };\n\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn}></TimerWrapper>\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          isDashboardOn={isDashboardOn}\n          dashboardToggleHandler={dashboardToggleHandler}\n        ></DashboardNavbar>\n        <Dashboard isDashboardOn={isDashboardOn}></Dashboard>\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}