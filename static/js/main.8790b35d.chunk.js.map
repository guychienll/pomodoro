{"version":3,"sources":["assets/icons/tomato_small_color.svg","assets/icons/arrow.svg","assets/icons/tomato_small_gray.svg","assets/icons/list_white.svg","assets/icons/add_white.svg","assets/icons/ringtone_white.svg","assets/icons/analysis_white.svg","assets/icons/list_red.svg","assets/icons/add_red.svg","assets/icons/ringtone_red.svg","assets/icons/analysis_red.svg","enum/enumDashboardToggleType.tsx","components/DashboardNavbar.tsx","enum/enumDashboardType.tsx","components/task/FormBox.tsx","components/task/TomatoEstimater.tsx","components/shared/Button.tsx","components/task/AddNewTask.tsx","components/shared/List.tsx","enum/enumTaskStatus.tsx","components/task/TaskLists.tsx","components/Dashboard.tsx","components/initDashboards.tsx","components/task/initTaskBuffer.tsx","components/timer/Clock.tsx","components/timer/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","enumDashboardToggleType","enumDashboardType","Wrapper","styled","div","props","isDashboardOn","Toggle","button","imgSrc","Tag","tomato","arrow","DashboardNavbar","dashboards","handleDashboardToggleOnClick","map","dashboard","name","NavButton","key","type","onClick","e","status","toggledSrc","untoggledSrc","TomatoColorfulIcon","ArrowIcon","FormBox","className","title","children","prototype","PropTypes","string","Tomato","tomatoStatus","TomatoEstimater","useState","estimatedValueBuffer","setEstimatedValueBuffer","value","onMouseOver","handleTomatosMouseOver","onMouseOut","handleTaskBufferOnChange","taskBuffer","point","tomatoColor","tomatoGray","btnStyle","width","mainColor","Button","btnAction","btnText","AddNewTask","handleAddNewTaskOnClick","onChange","placeholder","enumTaskStatus","Left","Right","List","handleTaskOnClick","primaryKey","headerIcon","actionBtn","TabGroup","Tab","currentStatus","tabType","HeaderIcon","isContentOn","Task","Title","Content","tabStatus","Todo","Done","Archieve","FormGroup","BtnGroup","NoDatas","TaskLists","setTabStatus","Object","values","filter","Number","tasks","task","length","sort","t1","t2","modifiedOn","sortedTask","createdOn","Array","from","_v","i","_tomato","index","handleArchiveTaskOnClick","handleUpdateTaskOnClick","DashboardTitle","Dashboard","find","db","currentName","currentType","dashboardByCurrentStatusMap","Map","AnalyticsReport","RingTone","get","initDashboards","AddToggledIcon","AddUntoggledIcon","ListToggledIcon","ListUntoggledIcon","AnalysisToggledIcon","AnalysisUntoggledIcon","RingtoneToggledIcon","RingtoneUntoggledIcon","initTaskBuffer","Time","Clock","Header","Main","ButtonGroup","TaskStatus","Footer","Timer","Container","TimerWrapper","DashboardWrapper","App","setIsDashboardOn","setDashboards","setTaskBuffer","setTasks","dashboardType","cloneTasks","target","dashboardIsOpened","cloneDashboards","forEach","cloneTask","cloneTaskBuffer","timeStamp","Date","getTime","push","taskId","keys","isUnArchive","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8790b35d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato_small_color.cc90d8a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.ad7dbdf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato_small_gray.3ab2cbcc.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_white.99b596ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_white.32e0817a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_white.c1791935.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_white.522ba8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/list_red.f6f4664c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add_red.30013910.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringtone_red.1e25b3f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/analysis_red.1998e7ea.svg\";","export enum enumDashboardToggleType {\n  Unknow = 0,\n  NavButton = \"navButton\",\n  Tag = \"tag\",\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TomatoColorfulIcon from \"../assets/icons/tomato_small_color.svg\";\nimport ArrowIcon from \"../assets/icons/arrow.svg\";\nimport { dashboardNavBarProps } from \"../typeAlias/dashboardNavBarProps\";\nimport { enumDashboardToggleType } from \"../enum/enumDashboardToggleType\";\n\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  min-width: 80px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: #333333;\n  border-right: ${props => {\n    return props.isDashboardOn === true ? \"1px solid #555555\" : null;\n  }};\n  position: absolute;\n  top: 0;\n  right: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  transition: 0.3s ease-in-out;\n`;\nconst Toggle: any = styled.button<{ imgSrc: string }>`\n  background-image: ${props => `url(${props.imgSrc})`};\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 100%;\n  height: 80px;\n  :hover {\n    background-image: ${props => `url(${props.imgSrc})`};\n    cursor: pointer;\n  }\n`;\nconst Tag: any = styled.button<{ tomato: string; arrow: string; isDashboardOn: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 45px;\n  width: 90px;\n  height: 50px;\n  border-radius: 25px 5px 5px 25px;\n  background-color: #fcfcfc;\n  display: flex;\n  ::after {\n    content: \"\";\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.tomato})`};\n    background-position: center;\n    background-size: 50%;\n    background-repeat: no-repeat;\n  }\n  ::before {\n    content: \"\";\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    width: 45px;\n    height: 100%;\n    background-image: ${props => `url(${props.arrow})`};\n    background-position: center;\n    background-size: 60%;\n    background-repeat: no-repeat;\n    transition: transform 0.5s;\n    transform: ${props => {\n      return props.isDashboardOn === true ? \"rotate(0deg)\" : \"rotate(-180deg)\";\n    }};\n  }\n`;\n\nconst DashboardNavbar: (props: dashboardNavBarProps) => JSX.Element =props => {\n  const { isDashboardOn, dashboards, handleDashboardToggleOnClick } = props;\n  return (\n    <Wrapper isDashboardOn={isDashboardOn}>\n      {dashboards.map(dashboard => {\n        return (\n          <Toggle\n            name={enumDashboardToggleType.NavButton}\n            key={dashboard.type}\n            onClick={(e: any) => {\n              handleDashboardToggleOnClick(e, dashboard.type);\n            }}\n            imgSrc={dashboard.status ? dashboard.toggledSrc : dashboard.untoggledSrc}\n          />\n        );\n      })}\n      <Tag\n        isDashboardOn={isDashboardOn}\n        name={enumDashboardToggleType.Tag}\n        tomato={TomatoColorfulIcon}\n        arrow={ArrowIcon}\n        onClick={(e: any) => {\n          handleDashboardToggleOnClick(e);\n        }}\n      />\n    </Wrapper>\n  );\n};\n\nexport default DashboardNavbar;\n","export enum enumDashboardType {\n  UnKnow = 0,\n  AddNewTask = 1,\n  TaskLists = 2,\n  AnalyticsReport = 3,\n  RingTone = 4,\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  font-family: Lato;\n  margin-top: 25px;\n  .form-title {\n    color: #acacac;\n    font-size: 17px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  input {\n    width: 100%;\n    height: 50px;\n    margin: 10px 0;\n    border-radius: 5px;\n    background-color: #fcfcfc;\n    outline: none;\n    font-size: 19px;\n    color: #333333;\n    padding-left: 10px;\n  }\n`;\n\nconst FormBox: (props: any) => JSX.Element =props => {\n  return (\n    <Wrapper>\n      <div className=\"form-title\">{props.title}</div>\n      {props.children}\n    </Wrapper>\n  );\n};\n\nFormBox.prototype = {\n  title: PropTypes.string,\n};\n\nexport default FormBox;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport tomatoGray from \"../../assets/icons/tomato_small_gray.svg\";\nimport { ITask } from \"src/interface/ITask\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 50px;\n`;\nconst Tomato = styled.button<{ tomatoStatus: string }>`\n  width: calc(100% / 15);\n  height: 100%;\n  background-image: ${props => `url(${props.tomatoStatus})`};\n  background-position: center;\n  background-size: 100%;\n  background-repeat: no-repeat;\n  transition: 0.2s ease-in;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst TomatoEstimater: (props: { taskBuffer: ITask; handleTaskBufferOnChange: any }) => JSX.Element =props => {\n  const tomatos: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const [estimatedValueBuffer, setEstimatedValueBuffer] = useState(0);\n  const handleTomatosMouseOver: (value: number) => void =value => {\n    setEstimatedValueBuffer(value);\n  };\n  const handleTomatosMouseOut: (value: number) => void =value => {\n    setEstimatedValueBuffer(0);\n  };\n  return (\n    <Wrapper>\n      {tomatos.map(value => {\n        return (\n          <Tomato\n            key={value}\n            name=\"point\"\n            value={value}\n            onMouseOver={() => {\n              handleTomatosMouseOver(value);\n            }}\n            onMouseOut={() => {\n              handleTomatosMouseOut(value);\n            }}\n            onClick={e => {\n              props.handleTaskBufferOnChange(e);\n            }}\n            tomatoStatus={props.taskBuffer.point >= value || estimatedValueBuffer >= value ? tomatoColor : tomatoGray}\n          />\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nexport default TomatoEstimater;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper: any = styled.button<{ btnStyle: any }>`\n  width: ${props => props.btnStyle.width};\n  border-radius: 30px;\n  height: 50px;\n  font-size: 19px;\n  font-family: Lato;\n  font-weight: bold;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 10px;\n  color: ${props => props.btnStyle.mainColor};\n  border: 3px solid ${props => props.btnStyle.mainColor};\n  background-color: transparent;\n  transition: 0.1s linear;\n  :hover {\n    color: #fcfcfc;\n    border: 3px solid ${props => props.btnStyle.mainColor};\n    background-color: ${props => props.btnStyle.mainColor};\n  }\n`;\n\nconst Button: (props: { btnText: string; btnStyle: any; btnAction: any }) => JSX.Element =props => {\n  // TODO: not to know why it add is null\n  // const handleActionOnKeyUp: (e: KeyboardEvent) => void = (e: KeyboardEvent): void => {\n  //   if (e.keyCode === 13) {\n  //     props.btnAction();\n  //   }\n  // };\n  // useEffect(() => {\n  //   window.addEventListener(\"keyup\", handleActionOnKeyUp);\n  //   return () => {\n  //     window.removeEventListener(\"keyup\", handleActionOnKeyUp);\n  //   };\n  // }, []);\n  return (\n    <Wrapper onClick={props.btnAction} btnStyle={props.btnStyle}>\n      {props.btnText}\n    </Wrapper>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport FormBox from \"./FormBox\";\nimport TomatoEstimater from \"./TomatoEstimater\";\nimport Button from \"../shared/Button\";\nimport { addNewTaskProps } from \"../../typeAlias/addNewTaskProps\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst AddNewTask: (props: addNewTaskProps) => JSX.Element =props => {\n  const { name } = props.taskBuffer;\n  const { handleAddNewTaskOnClick, handleTaskBufferOnChange, taskBuffer, children } = props;\n  return (\n    <Wrapper>\n      {children}\n      <FormBox title=\"TASK TITLE\">\n        <input\n          name=\"name\"\n          value={name}\n          onChange={handleTaskBufferOnChange}\n          type=\"text\"\n          placeholder=\"Plz Enter your task ...\"\n        />\n      </FormBox>\n      <FormBox title=\"ESTIMATED TOMOTO\">\n        <TomatoEstimater\n          handleTaskBufferOnChange={handleTaskBufferOnChange}\n          taskBuffer={taskBuffer}\n        />\n      </FormBox>\n      <Button\n        btnAction={handleAddNewTaskOnClick}\n        btnStyle={{ mainColor: \"#ea5548\", width: \"80%\" }}\n        btnText={`ADD TASK`}\n      />\n    </Wrapper>\n  );\n};\n\nexport default AddNewTask;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #414141;\n  color: #fcfcfc;\n  min-width: 220px;\n  border-bottom: 1px solid #333333;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst Left = styled.div`\n  display: flex;\n  width: 90%;\n`;\nconst Right = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 15px;\n`;\nconst List = (props: {\n  headerIcon: JSX.Element;\n  title: JSX.Element;\n  actionBtn: JSX.Element;\n  handleTaskOnClick: any;\n  primaryKey: number;\n}) => {\n  return (\n    <Wrapper\n      onClick={() => {\n        props.handleTaskOnClick(props.primaryKey);\n      }}\n    >\n      <Left>\n        {props.headerIcon}\n        {props.title}\n      </Left>\n      <Right>{props.actionBtn}</Right>\n    </Wrapper>\n  );\n};\n\nexport default List;\n","export enum enumTaskStatus {\n  Unknow = 0,\n  Todo = 1,\n  Done = 2,\n  Archieve = 3,\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport List from \"../shared/List\";\nimport { enumTaskStatus } from \"src/enum/enumTaskStatus\";\nimport tomatoColor from \"../../assets/icons/tomato_small_color.svg\";\nimport FormBox from \"./FormBox\";\nimport { taskListsProps } from \"../../typeAlias/taskListsProps\";\nimport Button from \"../shared/Button\";\nimport TomatoEstimater from \"./TomatoEstimater\";\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  color: #fcfcfc;\n`;\nconst TabGroup = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 80%;\n  height: 25px;\n  margin-top: 25px;\n`;\nconst Tab = styled.div<{ currentStatus: enumTaskStatus; tabType: enumTaskStatus }>`\n  min-width: 55px;\n  border-radius: 8px 8px 0 0;\n  width: calc(100% / 6);\n  height: 100%;\n  background-color: ${props => (props.currentStatus === props.tabType ? \"#ea5548\" : \"#606060\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Lato;\n  font-weight: bold;\n  font-size: 12px;\n  margin-right: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst HeaderIcon = styled.div<{ isContentOn: boolean }>`\n  background-image: url(${tomatoColor});\n  background-repeat: no-repeat;\n  background-size: 100%;\n  background-position: center;\n  width: calc(100% / 25);\n  min-width: 17px;\n  margin: 0px 15px;\n  opacity: ${props => {\n    return props.isContentOn ? \"100%\" : \"0%\";\n  }};\n  transition: 0.1s ease-in;\n`;\nconst Task = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  margin-top: 1px;\n`;\nconst Title = styled.div`\n  width: calc(100% / 3.5);\n  min-width: 120px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  .name {\n    font-family: Lato;\n    width: 100%;\n  }\n  .tomatos {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    width: 100%;\n    .tomato {\n      background-color: #ea5548;\n      border-radius: 100%;\n      width: 10px;\n      height: 10px;\n      margin-right: 5px;\n    }\n  }\n`;\nconst Content = styled.div<{ isContentOn: boolean; tabStatus: enumTaskStatus }>`\n  width: 80%;\n  height: ${props => {\n    const { isContentOn, tabStatus } = props;\n    if (isContentOn) {\n      switch (tabStatus) {\n        case enumTaskStatus.Todo:\n          return \"310px\";\n        case enumTaskStatus.Done:\n        case enumTaskStatus.Archieve:\n          return \"70px\";\n        default:\n          return \"0xp\";\n      }\n    }\n    return \"0px\";\n  }};\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #414141;\n  transition: all 0.1s ease-in-out;\n  overflow: hidden;\n`;\nconst FormGroup = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst BtnGroup = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst NoDatas = styled.div`\n  width: 80%;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  font-family: Lato;\n  margin-top: 30px;\n`;\n\nconst TaskLists: (props: taskListsProps) => JSX.Element = (props: taskListsProps) => {\n  const [tabStatus, setTabStatus] = useState(enumTaskStatus.Todo);\n  const handleTabStatusOnClick: (tabType: enumTaskStatus) => void = (tabType: enumTaskStatus) => {\n    setTabStatus(tabType);\n  };\n\n  return (\n    <Wrapper>\n      {props.children}\n      <TabGroup>\n        {Object.values(enumTaskStatus)\n          .filter(status => Number(status) > 0)\n          .map(status => {\n            return (\n              <Tab\n                key={status}\n                currentStatus={tabStatus}\n                tabType={status as enumTaskStatus}\n                onClick={() => {\n                  handleTabStatusOnClick(status as enumTaskStatus);\n                }}\n              >\n                {enumTaskStatus[status]}\n              </Tab>\n            );\n          })}\n      </TabGroup>\n      {props.tasks.filter(task => task.status === tabStatus).length > 0 ? (\n        props.tasks\n          .filter(task => task.status === tabStatus)\n          .sort((t1, t2) => (t1.modifiedOn > t2.modifiedOn ? -1 : 1))\n          .map(sortedTask => (\n            <Task key={sortedTask.createdOn}>\n              <List\n                primaryKey={sortedTask.createdOn}\n                handleTaskOnClick={props.handleTaskOnClick}\n                headerIcon={<HeaderIcon isContentOn={sortedTask.isContentOn} />}\n                actionBtn={\n                  sortedTask.isContentOn ? (\n                    <i className=\"fas fa-ellipsis-v fa-lg\" />\n                  ) : (\n                    <i className=\"fas fa-ellipsis-h fa-lg\" />\n                  )\n                }\n                title={\n                  <Title>\n                    <div className=\"name\">{sortedTask.name}</div>\n                    <div className=\"tomatos\">\n                      {Array.from({ length: sortedTask.point }, (_v, i) => i).map((_tomato, index) => (\n                        <div key={index} className=\"tomato\" />\n                      ))}\n                    </div>\n                  </Title>\n                }\n              />\n              <Content isContentOn={sortedTask.isContentOn} tabStatus={tabStatus}>\n                {tabStatus === enumTaskStatus.Todo && (\n                  <FormGroup>\n                    <FormBox title=\"TASK TITLE\">\n                      <input\n                        name=\"name\"\n                        value={props.taskBuffer.name}\n                        onChange={e => {\n                          props.handleTaskBufferOnChange(e);\n                        }}\n                        type=\"text\"\n                        placeholder=\"Plz Enter your task ...\"\n                      />\n                    </FormBox>\n                    <FormBox title=\"ESTIMATED TOMOTO\">\n                      <TomatoEstimater\n                        taskBuffer={props.taskBuffer}\n                        handleTaskBufferOnChange={props.handleTaskBufferOnChange}\n                      />\n                    </FormBox>\n                    <BtnGroup>\n                      <Button\n                        btnStyle={{\n                          mainColor: \"#7f7f7f\",\n                          width: \"30%\",\n                        }}\n                        btnText=\"Archive\"\n                        btnAction={e => {\n                          props.handleArchiveTaskOnClick(e, props.taskBuffer.createdOn);\n                        }}\n                      />\n                      <Button\n                        btnStyle={{\n                          mainColor: \"#ea5548\",\n                          width: \"50%\",\n                        }}\n                        btnText=\"SAVE\"\n                        btnAction={e => {\n                          props.handleUpdateTaskOnClick(e, props.taskBuffer.createdOn);\n                        }}\n                      />\n                    </BtnGroup>\n                  </FormGroup>\n                )}\n                {tabStatus === enumTaskStatus.Done && (\n                  <BtnGroup>\n                    <Button\n                      btnStyle={{\n                        mainColor: \"#7f7f7f\",\n                        width: \"30%\",\n                      }}\n                      btnText=\"Archive\"\n                      btnAction={e => {\n                        props.handleArchiveTaskOnClick(e, props.taskBuffer.createdOn);\n                      }}\n                    />\n                    <Button\n                      btnStyle={{\n                        mainColor: \"#ea5548\",\n                        width: \"50%\",\n                      }}\n                      btnText=\"Redo\"\n                      btnAction={e => {\n                        props.handleArchiveTaskOnClick(e, props.taskBuffer.createdOn, true);\n                      }}\n                    />\n                  </BtnGroup>\n                )}\n                {tabStatus === enumTaskStatus.Archieve && (\n                  <BtnGroup>\n                    <Button\n                      btnStyle={{\n                        mainColor: \"#7f7f7f\",\n                        width: \"100%\",\n                      }}\n                      btnText=\"UnArchive\"\n                      btnAction={e => {\n                        props.handleArchiveTaskOnClick(e, props.taskBuffer.createdOn, true);\n                      }}\n                    />\n                  </BtnGroup>\n                )}\n              </Content>\n            </Task>\n          ))\n      ) : (\n        <NoDatas>No {enumTaskStatus[tabStatus]} Tasks</NoDatas>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default TaskLists;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { enumDashboardType } from \"src/enum/enumDashboardType\";\nimport AddNewTask from \"./task/AddNewTask\";\nimport TaskLists from \"./task/TaskLists\";\nimport { IDashboard } from \"src/interface/IDashboard\";\nimport { dashboardProps } from \"../typeAlias/dashboardProps\";\nconst Wrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  height: 100%;\n  background-color: #333333;\n  width: ${props => {\n    return props.isDashboardOn === false ? \"0%\" : \"35%\";\n  }};\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: 0.3s ease-in-out;\n  overflow: hidden;\n`;\nconst DashboardTitle: any = styled.div`\n  width: 80%;\n  color: #fcfcfc;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: Lato;\n  padding: 25px 0;\n  margin-top: 5px;\n  border-bottom: 1px solid #414141;\n`;\n\nconst Dashboard: (props: dashboardProps) => JSX.Element =props => {\n  const { name: currentName, type: currentType }: IDashboard = props.dashboards.find(db => db.status === true);\n  const {\n    taskBuffer,\n    handleAddNewTaskOnClick,\n    handleTaskBufferOnChange,\n    tasks,\n    handleTaskOnClick,\n    isDashboardOn,\n    handleUpdateTaskOnClick,\n    handleArchiveTaskOnClick,\n  } = props;\n\n  const dashboardByCurrentStatusMap: Map<enumDashboardType, JSX.Element> = new Map([\n    [\n      enumDashboardType.AddNewTask,\n      <AddNewTask\n        taskBuffer={taskBuffer}\n        handleAddNewTaskOnClick={handleAddNewTaskOnClick}\n        handleTaskBufferOnChange={handleTaskBufferOnChange}\n      >\n        <DashboardTitle>{currentName}</DashboardTitle>\n      </AddNewTask>,\n    ],\n    [\n      enumDashboardType.TaskLists,\n      <TaskLists\n        handleTaskBufferOnChange={handleTaskBufferOnChange}\n        handleTaskOnClick={handleTaskOnClick}\n        handleUpdateTaskOnClick={handleUpdateTaskOnClick}\n        tasks={tasks}\n        taskBuffer={taskBuffer}\n        handleArchiveTaskOnClick={handleArchiveTaskOnClick}\n      >\n        <DashboardTitle>{currentName}</DashboardTitle>\n      </TaskLists>,\n    ],\n    [enumDashboardType.AnalyticsReport, null],\n    [enumDashboardType.RingTone, null],\n  ]);\n  return (\n    <Wrapper isDashboardOn={isDashboardOn}>\n      {isDashboardOn ? dashboardByCurrentStatusMap.get(currentType) : null}\n    </Wrapper>\n  );\n};\n\nexport default Dashboard;\n","import ListUntoggledIcon from \"../assets/icons/list_white.svg\";\nimport AddUntoggledIcon from \"../assets/icons/add_white.svg\";\nimport RingtoneUntoggledIcon from \"../assets/icons/ringtone_white.svg\";\nimport AnalysisUntoggledIcon from \"../assets/icons/analysis_white.svg\";\nimport ListToggledIcon from \"../assets/icons/list_red.svg\";\nimport AddToggledIcon from \"../assets/icons/add_red.svg\";\nimport RingtoneToggledIcon from \"../assets/icons/ringtone_red.svg\";\nimport AnalysisToggledIcon from \"../assets/icons/analysis_red.svg\";\nimport { enumDashboardType } from \"../enum/enumDashboardType\";\nimport { IDashboard } from \"../interface/IDashboard\";\nexport const initDashboards: IDashboard[] = [\n  {\n    type: enumDashboardType.AddNewTask,\n    status: false,\n    name: \"ADD NEW TASK\",\n    toggledSrc: AddToggledIcon,\n    untoggledSrc: AddUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.TaskLists,\n    status: true,\n    name: \"TASK LISTS\",\n    toggledSrc: ListToggledIcon,\n    untoggledSrc: ListUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.AnalyticsReport,\n    status: false,\n    name: \"ANALYTICS REPORT\",\n    toggledSrc: AnalysisToggledIcon,\n    untoggledSrc: AnalysisUntoggledIcon,\n  } as IDashboard,\n  {\n    type: enumDashboardType.RingTone,\n    status: false,\n    name: \"RING TONE\",\n    toggledSrc: RingtoneToggledIcon,\n    untoggledSrc: RingtoneUntoggledIcon,\n  } as IDashboard,\n];\n","import { ITask } from \"../../interface/ITask\";\nimport { enumTaskStatus } from \"../../enum/enumTaskStatus\";\nexport const initTaskBuffer: ITask = {\n  name: \"\",\n  point: 0,\n  isContentOn: false,\n  status: enumTaskStatus.Todo,\n  createdOn: 0,\n  modifiedOn: 0,\n} as ITask;\n","import React from \"react\";\nimport styled from \"styled-components\";\ntype clockProps = {};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 400px;\n  height: 400px;\n  border-radius: 100%;\n  background-color: #ea5548;\n  margin: 50px 0;\n`;\n\nconst Time = styled.div`\n  font: Bold 56px/72px Lato;\n  letter-spacing: 4px;\n  color: #333333;\n  opacity: 1;\n`;\n\nconst Clock: (props: clockProps) => JSX.Element = (props: clockProps) => {\n  return (\n    <Wrapper>\n      <Time>06:25</Time>\n    </Wrapper>\n  );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Clock from \"./Clock\";\nimport { ITask } from \"src/interface/ITask\";\nimport Button from \"../shared/Button\";\n\ntype timerProps = {\n  taskBuffer: ITask;\n};\n\nconst Wrapper = styled.div`\n  width: 600px;\n  font-family: Lato;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  color: #333333;\n`;\nconst Header = styled.div`\n  width: 400px;\n  height: 100px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  .name {\n    font-size: 29px;\n    font-weight: bold;\n  }\n`;\n\nconst Main = styled.div``;\n\nconst ButtonGroup = styled.div`\n  width: 400px;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst TaskStatus = styled.div`\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 50px;\n  font-size: 18px;\n`;\nconst Footer = styled.div`\n  font-weight: light;\n  font-size: 14px;\n`;\nconst Timer: (props: timerProps) => JSX.Element = (props: timerProps) => {\n  return (\n    <Wrapper>\n      <Header>\n        <div className=\"name\">{props.taskBuffer.name}</div>\n        {/* TODO: shold has a compoent to replace this points group */}\n      </Header>\n      <Main>\n        <Clock></Clock>\n        <ButtonGroup>\n          <Button btnText={\">\"} btnAction={{}} btnStyle={{ mainColor: \"#EA5548\", width: \"13%\" }}></Button>\n          <Button btnText={\"=\"} btnAction={{}} btnStyle={{ mainColor: \"#EA5548\", width: \"13%\" }}></Button>\n          <Button btnText={\"@\"} btnAction={{}} btnStyle={{ mainColor: \"#EA5548\", width: \"13%\" }}></Button>\n        </ButtonGroup>\n        <TaskStatus>TASK COMPLETE</TaskStatus>\n      </Main>\n      <Footer>PODOMORO</Footer>\n    </Wrapper>\n  );\n};\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DashboardNavbar from \"./components/DashboardNavbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport { enumDashboardType } from \"./enum/enumDashboardType\";\nimport { ITask } from \"./interface/ITask\";\nimport { IDashboard } from \"./interface/IDashboard\";\nimport { initDashboards } from \"./components/initDashboards\";\nimport { initTaskBuffer } from \"./components/task/initTaskBuffer\";\nimport { enumDashboardToggleType } from \"./enum/enumDashboardToggleType\";\nimport { enumTaskStatus } from \"./enum/enumTaskStatus\";\nimport Timer from \"./components/timer/Timer\";\n\nconst Container: any = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: transparent;\n  display: flex;\n`;\nconst TimerWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(65% - 80px)\" : \"calc(100% - 80px)\";\n  }};\n  background-color: #eaeaea;\n  height: 100%;\n  transition: 0.3s ease-in-out;\n  display: flex;\n  justify-content: center;\n`;\nconst DashboardWrapper: any = styled.div<{ isDashboardOn: boolean }>`\n  width: ${props => {\n    return props.isDashboardOn === true ? \"calc(35% + 80px)\" : \"80px\";\n  }};\n  height: 100%;\n  display: flex;\n  transition: 0.3s ease-in-out;\n`;\n\nconst App: () => JSX.Element = () => {\n  const [isDashboardOn, setIsDashboardOn] = useState(true as boolean);\n  const [dashboards, setDashboards] = useState(initDashboards as IDashboard[]);\n  const [taskBuffer, setTaskBuffer] = useState(initTaskBuffer as ITask);\n  const [tasks, setTasks] = useState([\n    {\n      name: \"demo task 1\",\n      point: 5,\n      isContentOn: false,\n      status: enumTaskStatus.Todo,\n      createdOn: 11111,\n      modifiedOn: 11111,\n    },\n    {\n      name: \"demo task 2\",\n      point: 7,\n      isContentOn: false,\n      status: enumTaskStatus.Todo,\n      createdOn: 22222,\n      modifiedOn: 22222,\n    },\n    {\n      name: \"demo task 3\",\n      point: 3,\n      isContentOn: false,\n      status: enumTaskStatus.Done,\n      createdOn: 33333,\n      modifiedOn: 33333,\n    },\n  ] as ITask[]);\n\n  const handleTaskBufferOnChange: (e: any) => void = (e: any) => {\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    cloneTaskBuffer[e.target.name] = e.target.value;\n    setTaskBuffer(cloneTaskBuffer);\n  };\n\n  const handleAddNewTaskOnClick: () => void = () => {\n    const cloneTasks: ITask[] = [...tasks];\n    const cloneTaskBuffer: ITask = { ...taskBuffer };\n    const timeStamp: number = new Date().getTime();\n    [cloneTaskBuffer.createdOn, cloneTaskBuffer.modifiedOn] = [timeStamp, timeStamp];\n    cloneTasks.push(cloneTaskBuffer);\n    setTasks(cloneTasks);\n    setTaskBuffer(initTaskBuffer);\n  };\n  const handleUpdateTaskOnClick: (e: any, taskId: number) => void = (e: any, taskId: number) => {\n    const cloneTasks: ITask[] = [...tasks];\n    cloneTasks.forEach(task => {\n      if (task.createdOn === taskId) {\n        Object.keys(task).forEach(key => {\n          task[key] = taskBuffer[key];\n        });\n        task.modifiedOn = new Date().getTime();\n      }\n    });\n    setTasks(cloneTasks);\n  };\n\n  const handleArchiveTaskOnClick: (e: any, taskId: number, isUnArchive: boolean) => void = (\n    e: any,\n    taskId: number,\n    isUnArchive: boolean = false\n  ) => {\n    const cloneTasks: ITask[] = [...tasks];\n    cloneTasks.forEach(task => {\n      if (task.createdOn === taskId) {\n        isUnArchive ? (task.status = enumTaskStatus.Todo) : (task.status = enumTaskStatus.Archieve);\n        task.modifiedOn = new Date().getTime();\n        task.isContentOn = false;\n      }\n    });\n    setTasks(cloneTasks);\n  };\n  const handleDashboardToggleOnClick: (e: any, dashboardType?: enumDashboardType) => void = (\n    e: any,\n    dashboardType?: enumDashboardType\n  ) => {\n    // initial state start\n    const cloneTasks: ITask[] = [...tasks].map(task => {\n      task.isContentOn = false;\n      return task;\n    });\n    setTasks(cloneTasks);\n    setTaskBuffer(initTaskBuffer);\n    // initial state end\n    if (e.target.name === enumDashboardToggleType.Tag) {\n      setIsDashboardOn(!isDashboardOn);\n      return;\n    }\n    const dashboardIsOpened: IDashboard = dashboards.find(dashboard => dashboard.status === true);\n    if (dashboardIsOpened.type === dashboardType) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    if (dashboardIsOpened.type !== dashboardType && isDashboardOn === false) {\n      setIsDashboardOn(!isDashboardOn);\n    }\n    const cloneDashboards: IDashboard[] = [...dashboards];\n    cloneDashboards.forEach(dashboard => {\n      dashboard.type !== dashboardType ? (dashboard.status = false) : (dashboard.status = true);\n    });\n    setDashboards(cloneDashboards);\n  };\n\n  const handleTaskOnClick: (key: number) => void = (key: number) => {\n    const cloneTasks: ITask[] = [...tasks];\n    const cloneTask: ITask = cloneTasks.find(task => {\n      return task.createdOn === key;\n    });\n    cloneTasks.forEach(task => {\n      if (task.createdOn === key) {\n        task.isContentOn = !task.isContentOn;\n      } else {\n        task.isContentOn = false;\n      }\n    });\n    setTaskBuffer(cloneTask);\n    setTasks(cloneTasks);\n  };\n\n  return (\n    <Container>\n      <TimerWrapper isDashboardOn={isDashboardOn}>\n        <Timer taskBuffer={tasks[0]}></Timer>\n      </TimerWrapper>\n      <DashboardWrapper isDashboardOn={isDashboardOn}>\n        <DashboardNavbar\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleDashboardToggleOnClick={handleDashboardToggleOnClick}\n        />\n        <Dashboard\n          tasks={tasks}\n          taskBuffer={taskBuffer}\n          dashboards={dashboards}\n          isDashboardOn={isDashboardOn}\n          handleTaskOnClick={handleTaskOnClick}\n          handleAddNewTaskOnClick={handleAddNewTaskOnClick}\n          handleTaskBufferOnChange={handleTaskBufferOnChange}\n          handleUpdateTaskOnClick={handleUpdateTaskOnClick}\n          handleArchiveTaskOnClick={handleArchiveTaskOnClick}\n        />\n      </DashboardWrapper>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}